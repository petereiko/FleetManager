@* @using FleetManager.Business.DataObjects
@using FleetManager.Business.Enums
@model List<DriverDutyOfCareDto>
@await Html.PartialAsync(
    "_DeleteConfirmationModal",
    new DeleteConfirmationViewModel { ActionName = "Delete" }
)
@{
    ViewData["Title"] = "Duty of Care Records";
}

<style>
    :root {
        --primary-color: #2563eb;
        --secondary-color: #64748b;
        --success-color: #10b981;
        --warning-color: #f59e0b;
        --danger-color: #ef4444;
        --light-bg: #f8fafc;
        --border-color: #e2e8f0;
        --text-primary: #1e293b;
        --text-secondary: #64748b;
        --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
        --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
        --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
    }

    body {
        background-color: var(--light-bg);
        color: var(--text-primary);
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }

    .main-container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 2rem 1rem;
    }

    .page-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 12px;
        padding: 2rem;
        margin-bottom: 2rem;
        color: white;
        box-shadow: var(--shadow-lg);
    }

    .page-title {
        font-size: 2rem;
        font-weight: 700;
        margin: 0 0 0.5rem 0;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .page-subtitle {
        font-size: 1.1rem;
        opacity: 0.9;
        margin: 0;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .stat-card {
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: var(--shadow-sm);
        border: 1px solid var(--border-color);
        transition: all 0.2s ease;
    }

    .stat-card:hover {
        transform: translateY(-2px);
        box-shadow: var(--shadow-md);
    }

    .stat-header {
        display: flex;
        justify-content: between;
        align-items: center;
        margin-bottom: 1rem;
    }

    .stat-title {
        font-size: 0.875rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.05em;
        color: var(--text-secondary);
        margin: 0;
    }

    .stat-value {
        font-size: 2.25rem;
        font-weight: 700;
        color: var(--text-primary);
        margin: 0;
    }

    .stat-icon {
        width: 3rem;
        height: 3rem;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.25rem;
    }

    .stat-icon.primary { background: #dbeafe; color: var(--primary-color); }
    .stat-icon.success { background: #d1fae5; color: var(--success-color); }
    .stat-icon.warning { background: #fef3c7; color: var(--warning-color); }
    .stat-icon.danger { background: #fee2e2; color: var(--danger-color); }

    .content-card {
        background: white;
        border-radius: 12px;
        box-shadow: var(--shadow-sm);
        border: 1px solid var(--border-color);
        overflow: hidden;
        margin-bottom: 2rem;
    }

    .card-header {
        padding: 1.5rem;
        border-bottom: 1px solid var(--border-color);
        background: #fafafa;
    }

    .card-title {
        font-size: 1.25rem;
        font-weight: 600;
        margin: 0;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .filters-section {
        padding: 1.5rem;
        background: #fafafa;
        border-bottom: 1px solid var(--border-color);
    }

    .filters-form {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        align-items: end;
    }

    .form-group {
        display: flex;
        flex-direction: column;
    }

    .form-label {
        font-size: 0.875rem;
        font-weight: 500;
        color: var(--text-primary);
        margin-bottom: 0.5rem;
    }

    .form-control, .form-select {
        padding: 0.75rem 1rem;
        border: 1px solid var(--border-color);
        border-radius: 8px;
        font-size: 0.875rem;
        transition: all 0.2s ease;
        background: white;
    }

    .form-control:focus, .form-select:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
    }

    .btn {
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        font-weight: 500;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        transition: all 0.2s ease;
        border: none;
        cursor: pointer;
        font-size: 0.875rem;
    }

    .btn-primary {
        background: var(--primary-color);
        color: white;
    }

    .btn-primary:hover {
        background: #1d4ed8;
        transform: translateY(-1px);
    }

    .btn-secondary {
        background: var(--secondary-color);
        color: white;
    }

    .btn-outline {
        background: transparent;
        border: 1px solid var(--border-color);
        color: var(--text-primary);
    }

    .btn-outline:hover {
        background: var(--light-bg);
    }

    .btn-sm {
        padding: 0.5rem 1rem;
        font-size: 0.8rem;
    }

    .records-table {
        width: 100%;
        border-collapse: collapse;
    }

    .records-table th {
        background: #fafafa;
        padding: 1rem;
        text-align: left;
        font-weight: 600;
        color: var(--text-primary);
        border-bottom: 2px solid var(--border-color);
        font-size: 0.875rem;
    }

    .records-table td {
        padding: 1rem;
        border-bottom: 1px solid var(--border-color);
        vertical-align: middle;
    }

    .records-table tbody tr {
        transition: background-color 0.2s ease;
    }

    .records-table tbody tr:hover {
        background-color: #f8fafc;
    }

    .records-table tbody tr.has-issues {
        background-color: #fefce8;
    }

    .driver-info, .vehicle-info {
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .avatar {
        width: 2.5rem;
        height: 2.5rem;
        border-radius: 50%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: 600;
        font-size: 0.875rem;
    }

    .info-text {
        display: flex;
        flex-direction: column;
    }

    .info-primary {
        font-weight: 600;
        color: var(--text-primary);
        margin-bottom: 0.25rem;
    }

    .info-secondary {
        font-size: 0.8rem;
        color: var(--text-secondary);
    }

    .badge {
        padding: 0.375rem 0.75rem;
        border-radius: 6px;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .badge-primary { background: #dbeafe; color: var(--primary-color); }
    .badge-success { background: #d1fae5; color: var(--success-color); }
    .badge-warning { background: #fef3c7; color: var(--warning-color); }
    .badge-danger { background: #fee2e2; color: var(--danger-color); }
    .badge-secondary { background: #f1f5f9; color: var(--secondary-color); }

    .status-icon {
        font-size: 1.25rem;
    }

    .status-icon.success { color: var(--success-color); }
    .status-icon.danger { color: var(--danger-color); }
    .status-icon.warning { color: var(--warning-color); }

    .actions-group {
        display: flex;
        gap: 0.5rem;
    }

    .empty-state {
        text-align: center;
        padding: 4rem 2rem;
    }

    .empty-state-icon {
        font-size: 4rem;
        color: var(--text-secondary);
        margin-bottom: 1rem;
    }

    .empty-state-title {
        font-size: 1.5rem;
        font-weight: 600;
        color: var(--text-primary);
        margin-bottom: 0.5rem;
    }

    .empty-state-description {
        color: var(--text-secondary);
        margin-bottom: 2rem;
    }

    .alert {
        padding: 1rem 1.5rem;
        border-radius: 8px;
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .alert-success {
        background: #d1fae5;
        color: #065f46;
        border: 1px solid #a7f3d0;
    }

    .alert-danger {
        background: #fee2e2;
        color: #991b1b;
        border: 1px solid #fca5a5;
    }

    .alert-dismissible {
        position: relative;
        padding-right: 3rem;
    }

    .alert-close {
        position: absolute;
        right: 1rem;
        background: none;
        border: none;
        font-size: 1.25rem;
        cursor: pointer;
        color: inherit;
        opacity: 0.7;
    }

    .alert-close:hover {
        opacity: 1;
    }

    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
    }

    .modal.show {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .modal-content {
        background: white;
        border-radius: 12px;
        padding: 2rem;
        max-width: 500px;
        width: 90%;
        box-shadow: var(--shadow-lg);
    }

    .modal-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 1.5rem;
    }

    .modal-title {
        font-size: 1.25rem;
        font-weight: 600;
        margin: 0;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .modal-close {
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
        color: var(--text-secondary);
    }

    .modal-footer {
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
        margin-top: 2rem;
    }

    .pagination {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 0.5rem;
        margin-top: 2rem;
    }

    .pagination-info {
        color: var(--text-secondary);
        font-size: 0.875rem;
        margin-right: 1rem;
    }

    @@media (max-width: 768px) {
        .main-container {
            padding: 1rem;
        }

        .page-header {
            padding: 1.5rem;
        }

        .page-title {
            font-size: 1.5rem;
        }

        .stats-grid {
            grid-template-columns: 1fr;
        }

        .filters-form {
            grid-template-columns: 1fr;
        }

        .records-table {
            font-size: 0.875rem;
        }

        .records-table th,
        .records-table td {
            padding: 0.75rem 0.5rem;
        }
    }
</style>

<div class="main-container">
    <!-- Page Header -->
    <div class="page-header">
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <div>
                <h1 class="page-title">
                    <i class="fas fa-shield-alt"></i>
                    Duty of Care Management
                </h1>
                <p class="page-subtitle">Monitor driver safety and compliance records across your fleet</p>
            </div>
            <div style="display: flex; gap: 1rem;">
                <a href="@Url.Action("ExportToExcel")" class="btn btn-outline" style="color: white; border-color: rgba(255,255,255,0.3);">
                    <i class="fas fa-download"></i>
                    Export Data
                </a>
                <a href="@Url.Action("Create")" class="btn" style="background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3);">
                    <i class="fas fa-plus"></i>
                    New Record
                </a>
            </div>
        </div>
    </div>

    <!-- Alert Messages -->
    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible">
            <i class="fas fa-check-circle"></i>
            @TempData["Success"]
            <button type="button" class="alert-close" onclick="this.parentElement.remove()">×</button>
        </div>
    }
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible">
            <i class="fas fa-exclamation-circle"></i>
            @TempData["Error"]
            <button type="button" class="alert-close" onclick="this.parentElement.remove()">×</button>
        </div>
    }

    <!-- Statistics Cards -->
    <div class="stats-grid">
        <div class="stat-card">
            <div class="stat-header">
                <div>
                    <p class="stat-title">Total Records</p>
                    <h3 class="stat-value">@Model.Count</h3>
                </div>
                <div class="stat-icon primary">
                    <i class="fas fa-clipboard-list"></i>
                </div>
            </div>
        </div>
        <div class="stat-card">
            <div class="stat-header">
                <div>
                    <p class="stat-title">Compliant</p>
                    <h3 class="stat-value">@Model.Count(x => x.DutyOfCareStatus == DriverDutyOfCareStatus.Compliant)</h3>
                </div>
                <div class="stat-icon success">
                    <i class="fas fa-check-circle"></i>
                </div>
            </div>
        </div>
        <div class="stat-card">
            <div class="stat-header">
                <div>
                    <p class="stat-title">Pending Review</p>
                    <h3 class="stat-value">@Model.Count(x => x.DutyOfCareStatus == DriverDutyOfCareStatus.PendingReview)</h3>
                </div>
                <div class="stat-icon warning">
                    <i class="fas fa-clock"></i>
                </div>
            </div>
        </div>
        <div class="stat-card">
            <div class="stat-header">
                <div>
                    <p class="stat-title">Issues Reported</p>
                    <h3 class="stat-value">@Model.Count(x => x.ReportsVehicleIssues || x.ReportsFatigue)</h3>
                </div>
                <div class="stat-icon danger">
                    <i class="fas fa-exclamation-triangle"></i>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="content-card">
        <div class="card-header">
            <h3 class="card-title">
                <i class="fas fa-filter"></i>
                Search & Filter Records
            </h3>
        </div>
        <div class="filters-section">
            <form id="filterForm" method="get" action="@Url.Action("Index")">
                <div class="filters-form">
                    <div class="form-group">
                        <label class="form-label">Search</label>
                        <input type="text" name="search" class="form-control" placeholder="Search drivers, vehicles..." 
                               value="@Context.Request.Query["search"]">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Date From</label>
                        <input type="date" name="dateFrom" class="form-control" 
                               value="@Context.Request.Query["dateFrom"]">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Date To</label>
                        <input type="date" name="dateTo" class="form-control" 
                               value="@Context.Request.Query["dateTo"]">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Status</label>
                        <select name="status" class="form-select">
                            <option value="">All Statuses</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Record Type</label>
                        <select name="recordType" class="form-select">
                            <option value="">All Types</option>
                            @foreach (var type in Enum.GetValues<DutyOfCareRecordType>())
                            {
                               @*  <option value="@type" @(Context.Request.Query["recordType"] == type.ToString() ? "selected" : "")>
                                    @type.ToString()
                                </option> 
                            }
                        </select>
                    </div>
                    <div class="form-group" style="display: flex; gap: 0.5rem;">
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-search"></i>
                            Apply Filters
                        </button>
                        <a href="@Url.Action("Index")" class="btn btn-outline">
                            <i class="fas fa-times"></i>
                            Clear
                        </a>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Records Table -->
    <div class="content-card">
        <div class="card-header">
            <h3 class="card-title">
                <i class="fas fa-table"></i>
                Records (@Model.Count)
            </h3>
        </div>
        
        @if (Model.Any())
        {
            <div style="overflow-x: auto;">
                <table class="records-table">
                    <thead>
                        <tr>
                            <th>Date & Time</th>
                            <th>Driver</th>
                            <th>Vehicle</th>
                            <th>Type</th>
                            <th>Status</th>
                            <th>Health Check</th>
                            <th>Vehicle Check</th>
                            <th>Issues</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var record in Model)
                        {
                            <tr class="@(record.ReportsVehicleIssues || record.ReportsFatigue ? "has-issues" : "")">
                                <td>
                                    <div class="info-text">
                                        <span class="info-primary">@record.Date.ToString("MMM dd, yyyy")</span>
                                        <span class="info-secondary">@record.DeclarationTimestamp.ToString("HH:mm")</span>
                                    </div>
                                </td>
                                <td>
                                    <div class="driver-info">
                                        <div class="avatar">
                                            @record.DriverName.Substring(0, Math.Min(2, record.DriverName.Length)).ToUpper()
                                        </div>
                                        <div class="info-text">
                                            <span class="info-primary">@record.DriverName</span>
                                            <span class="info-secondary">ID: @record.DriverId</span>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <div class="vehicle-info">
                                        <div class="avatar" style="background: linear-gradient(135deg, #64748b 0%, #475569 100%);">
                                            <i class="fas fa-car"></i>
                                        </div>
                                        <div class="info-text">
                                            <span class="info-primary">@record.VehicleDescription</span>
                                            <span class="info-secondary">ID: @record.VehicleId</span>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <span class="badge badge-primary">
                                        @record.DutyOfCareRecordType.ToString()
                                    </span>
                                </td>
                                <td>
                                    @{
                                        var statusClass = record.DutyOfCareStatus switch
                                        {
                                            DriverDutyOfCareStatus.Compliant => "badge-success",
                                            DriverDutyOfCareStatus.PendingReview => "badge-warning",
                                            DriverDutyOfCareStatus.ActionRequired => "badge-danger",
                                            _ => "badge-secondary"
                                        };
                                        var statusText = record.DutyOfCareStatus.ToString()
                                            .Replace("PendingReview", "Pending Review")
                                            .Replace("ActionRequired", "Action Required");
                                    }
                                    <span class="badge @statusClass">@statusText</span>
                                </td>
                                <td style="text-align: center;">
                                    @if (record.IsFitToDrive)
                                    {
                                        <i class="fas fa-check-circle status-icon success" title="Fit to Drive"></i>
                                    }
                                    else
                                    {
                                        <i class="fas fa-times-circle status-icon danger" title="Not Fit to Drive"></i>
                                    }
                                </td>
                                <td style="text-align: center;">
                                    @if (record.VehiclePreCheckCompleted)
                                    {
                                        <i class="fas fa-check-circle status-icon success" title="Pre-check Completed"></i>
                                    }
                                    else
                                    {
                                        <i class="fas fa-times-circle status-icon danger" title="Pre-check Not Completed"></i>
                                    }
                                </td>
                                <td style="text-align: center;">
                                    @if (record.ReportsVehicleIssues || record.ReportsFatigue)
                                    {
                                        <i class="fas fa-exclamation-triangle status-icon warning" title="Issues Reported"></i>
                                    }
                                    else
                                    {
                                        <i class="fas fa-check status-icon success" title="No Issues"></i>
                                    }
                                </td>
                                <td>
                                    <div class="actions-group">
                                        <a href="@Url.Action("Edit", new { id = record.Id })" 
                                           class="btn btn-sm btn-outline" title="Edit Record">
                                            <i class="fas fa-edit"></i>
                                        </a>
                                        <button type="button" class="btn btn-sm btn-outline" 
                                                onclick="viewDetails(@record.Id)" title="View Details">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                        
                                        <button class="btn btn-outline-danger delete-btn"
                                                  data-item-id="@record.Id"
                                                  data-item-name="@record.DriverName @record.DutyOfCareRecordType.ToString()"
                                                  title="Delete">
                                              <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="empty-state">
                <div class="empty-state-icon">
                    <i class="fas fa-clipboard-list"></i>
                </div>
                <h3 class="empty-state-title">No Records Found</h3>
                <p class="empty-state-description">
                    @if (Context.Request.Query.Count > 0)
                    {
                        <span>No records match your current filters. Try adjusting your search criteria.</span>
                    }
                    else
                    {
                        <span>Get started by creating your first duty of care record to monitor driver safety and compliance.</span>
                    }
                </p>
                <a href="@Url.Action("Create")" class="btn btn-primary">
                    <i class="fas fa-plus"></i>
                    Create First Record
                </a>
            </div>
        }
    </div>
</div>


<!-- View Details Modal -->
<div class="modal" id="detailsModal">
    <div class="modal-content" style="max-width: 600px;">
        <div class="modal-header">
            <h3 class="modal-title">
                <i class="fas fa-info-circle" style="color: var(--primary-color);"></i>
                Record Details
            </h3>
            <button type="button" class="modal-close" onclick="closeModal('detailsModal')">×</button>
        </div>
        <div id="detailsContent">
            <!-- Content will be loaded via AJAX -->
        </div>
    </div>
</div>

<script>
    // Modal Management
    function showModal(modalId) {
        document.getElementById(modalId).classList.add('show');
        document.body.style.overflow = 'hidden';
    }

    function closeModal(modalId) {
        document.getElementById(modalId).classList.remove('show');
        document.body.style.overflow = 'auto';
    }

    // Close modal when clicking outside
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('modal')) {
            closeModal(e.target.id);
        }
    });

    // Delete Record Functionality
    function confirmDelete(id) {
        document.getElementById('deleteForm').action = '@Url.Action("Delete")/' + id;
        showModal('deleteModal');
    }

    // View Details Functionality
    function viewDetails(id) {
        const detailsContent = document.getElementById('detailsContent');
        detailsContent.innerHTML = '<div style="text-align: center; padding: 2rem;"><i class="fas fa-spinner fa-spin"></i> Loading...</div>';
        
        fetch('@Url.Action("Details")/' + id, {
            method: 'GET',
            headers: {
                'Accept': 'text/html',
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.text();
        })
        .then(html => {
            detailsContent.innerHTML = html;
            showModal('detailsModal');
        })
        .catch(error => {
            console.error('Error loading details:', error);
            detailsContent.innerHTML = `
                <div style="text-align: center; padding: 2rem; color: var(--danger-color);">
                    <i class="fas fa-exclamation-triangle"></i>
                    <p>Error loading record details. Please try again.</p>
                </div>
            `;
            showModal('detailsModal');
        });
    }

    // Export Functionality
    function exportToExcel() {
        // Get current filter parameters
        const form = document.getElementById('filterForm');
        const formData = new FormData(form);
        const params = new URLSearchParams(formData);
        
        // Add export parameter
        params.append('export', 'true');
        
        // Create download link
        const exportUrl = '@Url.Action("ExportToExcel")?' + params.toString();
        window.location.href = exportUrl;
    }

    // Enhanced Form Submission with Loading States
    document.getElementById('filterForm').addEventListener('submit', function(e) {
        const submitBtn = this.querySelector('button[type="submit"]');
        const originalText = submitBtn.innerHTML;
        
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Filtering...';
        
        // Re-enable button after a delay (in case of issues)
        setTimeout(() => {
            submitBtn.disabled = false;
            submitBtn.innerHTML = originalText;
        }, 5000);
    });

    // Auto-submit form when select filters change
    document.querySelectorAll('select[name="status"], select[name="recordType"]').forEach(select => {
        select.addEventListener('change', function() {
            // Add a small delay to prevent rapid submissions
            clearTimeout(this.timeout);
            this.timeout = setTimeout(() => {
                document.getElementById('filterForm').submit();
            }, 300);
        });
    });

    // Date range validation
    document.querySelector('input[name="dateFrom"]').addEventListener('change', function() {
        const dateTo = document.querySelector('input[name="dateTo"]');
        if (this.value && dateTo.value && new Date(this.value) > new Date(dateTo.value)) {
            dateTo.value = this.value;
        }
        dateTo.min = this.value;
    });

    document.querySelector('input[name="dateTo"]').addEventListener('change', function() {
        const dateFrom = document.querySelector('input[name="dateFrom"]');
        if (this.value && dateFrom.value && new Date(this.value) < new Date(dateFrom.value)) {
            dateFrom.value = this.value;
        }
        dateFrom.max = this.value;
    });

    // Search input debouncing
    let searchTimeout;
    document.querySelector('input[name="search"]').addEventListener('input', function() {
        clearTimeout(searchTimeout);
        const form = document.getElementById('filterForm');
        
        // Show loading indicator in search field
        this.style.backgroundImage = 'url("data:image/svg+xml,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' width=\'20\' height=\'20\' viewBox=\'0 0 24 24\' fill=\'none\' stroke=\'%23666\' stroke-width=\'2\' stroke-linecap=\'round\' stroke-linejoin=\'round\'%3E%3Cpath d=\'M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\'/%3E%3C/svg%3E")';
        this.style.backgroundRepeat = 'no-repeat';
        this.style.backgroundPosition = 'right 12px center';
        this.style.paddingRight = '40px';
        
        searchTimeout = setTimeout(() => {
            if (this.value.length >= 2 || this.value.length === 0) {
                form.submit();
            }
        }, 800);
    });

    // Keyboard shortcuts
    document.addEventListener('keydown', function(e) {
        // Ctrl/Cmd + K to focus search
        if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
            e.preventDefault();
            document.querySelector('input[name="search"]').focus();
        }
        // Escape to close modals
        if (e.key === 'Escape') {
            document.querySelectorAll('.modal.show').forEach(modal => {
                closeModal(modal.id);
            });
        }
    });

    // Initialize tooltips and enhance UX
    document.addEventListener('DOMContentLoaded', function() {
        // Add loading states to action buttons
        document.querySelectorAll('a[href*="Edit"], a[href*="Create"]').forEach(link => {
            link.addEventListener('click', function() {
                const icon = this.querySelector('i');
                if (icon) {
                    icon.className = 'fas fa-spinner fa-spin';
                }
            });
        });

        // Auto-focus search field if there are existing filters
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.has('search') && urlParams.get('search')) {
            document.querySelector('input[name="search"]').focus();
        }

        // Highlight filtered results
        const searchTerm = urlParams.get('search');
        if (searchTerm && searchTerm.length > 0) {
            highlightSearchTerms(searchTerm);
        }

        // Add smooth scrolling to top button if page is long
        if (document.body.scrollHeight > window.innerHeight * 2) {
            addScrollToTopButton();
        }
    });

    // Highlight search terms in results
    function highlightSearchTerms(term) {
        const regex = new RegExp(`(${term})`, 'gi');
        document.querySelectorAll('.records-table td .info-primary').forEach(element => {
            if (element.textContent.toLowerCase().includes(term.toLowerCase())) {
                element.innerHTML = element.textContent.replace(regex, '<mark style="background: #fef3c7; padding: 0.125rem;">$1</mark>');
            }
        });
    }

    // Add scroll to top functionality for long pages
    function addScrollToTopButton() {
        const scrollBtn = document.createElement('button');
        scrollBtn.innerHTML = '<i class="fas fa-chevron-up"></i>';
        scrollBtn.className = 'scroll-to-top';
        scrollBtn.style.cssText = `
            position: fixed;
            bottom: 2rem;
            right: 2rem;
            background: var(--primary-color);
            color: white;
            border: none;
            border-radius: 50%;
            width: 3rem;
            height: 3rem;
            cursor: pointer;
            box-shadow: var(--shadow-lg);
            opacity: 0;
            transition: all 0.3s ease;
            z-index: 1000;
        `;

        document.body.appendChild(scrollBtn);

        scrollBtn.addEventListener('click', () => {
            window.scrollTo({ top: 0, behavior: 'smooth' });
        });

        window.addEventListener('scroll', () => {
            if (window.pageYOffset > 300) {
                scrollBtn.style.opacity = '1';
                scrollBtn.style.transform = 'translateY(0)';
            } else {
                scrollBtn.style.opacity = '0';
                scrollBtn.style.transform = 'translateY(10px)';
            }
        });
    }

    // Performance optimization: Lazy load images/icons if any
    if ('IntersectionObserver' in window) {
        const imageObserver = new IntersectionObserver((entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const img = entry.target;
                    img.src = img.dataset.src;
                    img.classList.remove('lazy');
                    imageObserver.unobserve(img);
                }
            });
        });

        document.querySelectorAll('img[data-src]').forEach(img => {
            imageObserver.observe(img);
        });
    }

    // Error handling for network requests
    window.addEventListener('online', function() {
        document.querySelectorAll('.network-error').forEach(el => el.remove());
    });

    window.addEventListener('offline', function() {
        const banner = document.createElement('div');
        banner.className = 'network-error alert alert-warning';
        banner.innerHTML = '<i class="fas fa-wifi"></i> You are currently offline. Some features may not work properly.';
        banner.style.cssText = 'position: fixed; top: 0; left: 0; right: 0; z-index: 9999; margin: 0; border-radius: 0;';
        document.body.insertBefore(banner, document.body.firstChild);
    });
</script>






 *@






    @using FleetManager.Business.DataObjects
@using FleetManager.Business.Enums
@model List<DriverDutyOfCareDto>
@{
    ViewData["Title"] = "Duty of Care Records";
}

<style>
    .avatar-circle {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        background: linear-gradient(135deg, #007bff, #0056b3);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: bold;
        font-size: 0.8rem;
    }

    .avatar-circle-lg {
        width: 48px;
        height: 48px;
        border-radius: 50%;
        background: linear-gradient(135deg, #007bff, #0056b3);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: bold;
        font-size: 1.2rem;
    }

    .sortable {
        cursor: pointer;
        user-select: none;
    }

    .sortable:hover {
        background-color: rgba(255, 255, 255, 0.1);
    }

    .sort-icon {
        margin-left: 5px;
        opacity: 0.5;
        font-size: 0.8rem;
    }

    .card {
        transition: transform 0.2s, box-shadow 0.2s;
    }

    .card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .table-hover tbody tr:hover {
        background-color: rgba(0, 123, 255, 0.05);
    }

    .btn-group .btn {
        border-radius: 0.25rem;
        margin-right: 2px;
    }

    .btn-group .btn:last-child {
        margin-right: 0;
    }

    .fade-in {
        animation: fadeIn 0.3s ease-in;
    }

    @@keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }

    .status-badge {
        padding: 0.35em 0.65em;
        font-size: 0.75em;
        font-weight: 700;
        line-height: 1;
        text-align: center;
        white-space: nowrap;
        vertical-align: baseline;
        border-radius: 0.25rem;
    }

    .badge-compliant {
        background-color: #28a745;
        color: white;
    }

    .badge-pending {
        background-color: #ffc107;
        color: #212529;
    }

    .badge-action {
        background-color: #dc3545;
        color: white;
    }

    .status-icon {
        font-size: 1.2rem;
    }

    .status-success {
        color: #28a745;
    }

    .status-warning {
        color: #ffc107;
    }

    .status-danger {
        color: #dc3545;
    }

    .date-range-picker {
        display: flex;
        gap: 10px;
    }

    .date-range-picker .form-control {
        width: 150px;
    }
</style>

<div class="container-fluid py-4">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-md-8">
            <h2 class="fw-bold text-primary mb-1">
                <i class="fas fa-shield-alt me-2"></i>Duty of Care Records
            </h2>
            <p class="text-muted mb-0">Monitor driver safety and compliance records across your fleet</p>
        </div>
        <div class="col-md-4 text-end">
            <a asp-action="Create" class="btn btn-success btn-lg shadow-sm">
                <i class="fas fa-plus me-2"></i>New Record
            </a>
            <a href="@Url.Action("ExportToExcel")" class="btn btn-primary btn-lg shadow-sm ms-2">
                <i class="fas fa-download me-2"></i>Export Data
            </a>
        </div>
    </div>

    <!-- Alert Messages -->
    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show mb-4" role="alert">
            <i class="fas fa-check-circle me-2"></i>
            @TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show mb-4" role="alert">
            <i class="fas fa-exclamation-circle me-2"></i>
            @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Statistics Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card bg-primary text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title">Total Records</h6>
                            <h3 class="mb-0">@Model.Count</h3>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-clipboard-list fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-success text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title">Compliant</h6>
                            <h3 class="mb-0">@Model.Count(x => x.DutyOfCareStatus == DriverDutyOfCareStatus.Compliant)</h3>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-check-circle fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-warning text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title">Pending Review</h6>
                            <h3 class="mb-0">@Model.Count(x => x.DutyOfCareStatus == DriverDutyOfCareStatus.PendingReview)</h3>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-clock fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-danger text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title">Issues Reported</h6>
                            <h3 class="mb-0">@Model.Count(x => x.ReportsVehicleIssues || x.ReportsFatigue)</h3>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-exclamation-triangle fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Search and Filter Section -->
    <div class="row mb-4">
        <div class="col-md-4">
            <div class="input-group">
                <span class="input-group-text bg-light">
                    <i class="fas fa-search text-muted"></i>
                </span>
                <input type="text" class="form-control" id="searchInput" placeholder="Search by driver, vehicle, status...">
            </div>
        </div>
        <div class="col-md-2">
            <select class="form-select" id="statusFilter">
                <option value="">All Statuses</option>
                <option value="Compliant">Compliant</option>
                <option value="PendingReview">Pending Review</option>
                <option value="ActionRequired">Action Required</option>
            </select>
        </div>
        <div class="col-md-2">
            <select class="form-select" id="typeFilter">
                <option value="">All Types</option>
                @foreach (var type in Enum.GetValues<DutyOfCareRecordType>())
                {
                    <option value="@type">@type.ToString()</option>
                }
            </select>
        </div>
        <div class="col-md-4">
            <div class="date-range-picker">
                <input type="text" class="form-control flatpickr" id="dateFrom" placeholder="From Date">
                <input type="text" class="form-control flatpickr" id="dateTo" placeholder="To Date">
                <button class="btn btn-primary" id="applyDateFilter">
                    <i class="fas fa-filter"></i>
                </button>
            </div>
        </div>
    </div>

    <!-- Records Table -->
    <div class="card shadow">
        <div class="card-header bg-light">
            <div class="row align-items-center">
                <div class="col">
                    <h5 class="mb-0">
                        <i class="fas fa-table me-2"></i>Records List
                    </h5>
                </div>
                <div class="col-auto">
                    <div class="btn-group btn-group-sm" role="group">
                        <button type="button" class="btn btn-outline-secondary active" id="tableView">
                            <i class="fas fa-table"></i>
                        </button>
                        <button type="button" class="btn btn-outline-secondary" id="cardView">
                            <i class="fas fa-th-large"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-body p-0">
            <!-- Table View -->
            <div id="tableContainer" class="table-responsive">
                <table class="table table-hover mb-0" id="recordsTable">
                    <thead class="table-dark">
                        <tr>
                            <th class="sortable" data-sort="date">
                                <i class="fas fa-calendar me-1"></i>Date
                                <i class="fas fa-sort sort-icon"></i>
                            </th>
                            <th class="sortable" data-sort="driver">
                                <i class="fas fa-user me-1"></i>Driver
                                <i class="fas fa-sort sort-icon"></i>
                            </th>
                            <th class="sortable" data-sort="vehicle">
                                <i class="fas fa-car me-1"></i>Vehicle
                                <i class="fas fa-sort sort-icon"></i>
                            </th>
                            <th class="sortable" data-sort="type">
                                <i class="fas fa-tag me-1"></i>Type
                                <i class="fas fa-sort sort-icon"></i>
                            </th>
                            <th class="sortable" data-sort="status">
                                <i class="fas fa-signal me-1"></i>Status
                                <i class="fas fa-sort sort-icon"></i>
                            </th>
                            <th><i class="fas fa-heartbeat me-1"></i>Health</th>
                            <th><i class="fas fa-car me-1"></i>Vehicle Check</th>
                            <th><i class="fas fa-exclamation-triangle me-1"></i>Issues</th>
                            <th class="text-center" width="120">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var record in Model)
                        {
                            <tr class="record-row" 
                                data-driver="@record.DriverName?.ToLower()" 
                                data-vehicle="@record.VehicleDescription?.ToLower()"
                                data-status="@record.DutyOfCareStatus.ToString().ToLower()"
                                data-type="@record.DutyOfCareRecordType.ToString().ToLower()"
                                data-date="@record.Date.ToString("yyyy-MM-dd")">
                                <td>
                                    <div class="d-flex flex-column">
                                        <span>@record.Date.ToString("MMM dd, yyyy")</span>
                                        <small class="text-muted">@record.DeclarationTimestamp.ToString("HH:mm")</small>
                                    </div>
                                </td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="avatar-circle me-2">
                                            @(record.DriverName?.Substring(0, Math.Min(2, record.DriverName.Length)).ToUpper())
                                        </div>
                                        <div>
                                            <strong>@record.DriverName</strong>
                                            <div class="text-muted small">ID: @record.DriverId</div>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="avatar-circle me-2" style="background: linear-gradient(135deg, #64748b 0%, #475569 100%);">
                                            <i class="fas fa-car"></i>
                                        </div>
                                        <div>
                                            <strong>@record.VehicleDescription</strong>
                                            <div class="text-muted small">ID: @record.VehicleId</div>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <span class="badge bg-primary">@record.DutyOfCareRecordType.ToString()</span>
                                </td>
                                <td>
                                    @{
                                        var statusClass = record.DutyOfCareStatus switch
                                        {
                                            DriverDutyOfCareStatus.Compliant => "badge-compliant",
                                            DriverDutyOfCareStatus.PendingReview => "badge-pending",
                                            DriverDutyOfCareStatus.ActionRequired => "badge-action",
                                            _ => "badge-secondary"
                                        };
                                        var statusText = record.DutyOfCareStatus.ToString()
                                            .Replace("PendingReview", "Pending Review")
                                            .Replace("ActionRequired", "Action Required");
                                    }
                                    <span class="status-badge @statusClass">@statusText</span>
                                </td>
                                <td class="text-center">
                                    @if (record.IsFitToDrive)
                                    {
                                        <i class="fas fa-check-circle status-icon status-success" title="Fit to Drive"></i>
                                    }
                                    else
                                    {
                                        <i class="fas fa-times-circle status-icon status-danger" title="Not Fit to Drive"></i>
                                    }
                                </td>
                                <td class="text-center">
                                    @if (record.VehiclePreCheckCompleted)
                                    {
                                        <i class="fas fa-check-circle status-icon status-success" title="Pre-check Completed"></i>
                                    }
                                    else
                                    {
                                        <i class="fas fa-times-circle status-icon status-danger" title="Pre-check Not Completed"></i>
                                    }
                                </td>
                                <td class="text-center">
                                    @if (record.ReportsVehicleIssues || record.ReportsFatigue)
                                    {
                                        <i class="fas fa-exclamation-triangle status-icon status-warning" title="Issues Reported"></i>
                                    }
                                    else
                                    {
                                        <i class="fas fa-check status-icon status-success" title="No Issues"></i>
                                    }
                                </td>
                                <td class="text-center">
                                    <div class="btn-group btn-group-sm" role="group">
                                        <a asp-action="Edit" asp-route-id="@record.Id" 
                                           class="btn btn-outline-primary"
                                           data-bs-toggle="tooltip" 
                                           title="Edit Record">
                                            <i class="fas fa-edit"></i>
                                        </a>
                                        <button class="btn btn-outline-info" 
                                                data-bs-toggle="modal"
                                                data-bs-target="#detailsModal"
                                                data-url="@Url.Action("Details", new { id = record.Id })"
                                                data-bs-toggle="tooltip" 
                                                title="View Details">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                        <button type="button" 
                                                class="btn btn-outline-danger delete-btn"
                                                data-record-id="@record.Id"
                                                data-record-name="@record.DriverName - @record.DutyOfCareRecordType.ToString()"
                                                data-bs-toggle="tooltip" 
                                                title="Delete Record">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Card View (Initially Hidden) -->
            <div id="cardContainer" style="display: none;" class="p-3">
                <div class="row" id="recordCards">
                    @foreach (var record in Model)
                    {
                        <div class="col-md-6 col-lg-4 mb-3 record-card" 
                             data-driver="@record.DriverName?.ToLower()" 
                             data-vehicle="@record.VehicleDescription?.ToLower()"
                             data-status="@record.DutyOfCareStatus.ToString().ToLower()"
                             data-type="@record.DutyOfCareRecordType.ToString().ToLower()"
                             data-date="@record.Date.ToString("yyyy-MM-dd")">
                            <div class="card h-100 shadow-sm">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-start mb-2">
                                        <div class="avatar-circle-lg">
                                            @(record.DriverName?.Substring(0, Math.Min(2, record.DriverName.Length)).ToUpper())
                                        </div>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle" 
                                                    type="button" data-bs-toggle="dropdown">
                                                <i class="fas fa-ellipsis-v"></i>
                                            </button>
                                            <ul class="dropdown-menu">
                                                <li>
                                                    <button class="dropdown-item" 
                                                            data-bs-toggle="modal"
                                                            data-bs-target="#detailsModal"
                                                            data-url="@Url.Action("Details", new { id = record.Id })">
                                                        <i class="fas fa-eye me-2"></i>View Details
                                                    </button>
                                                </li>
                                                <li>
                                                    <a class="dropdown-item" asp-action="Edit" asp-route-id="@record.Id">
                                                        <i class="fas fa-edit me-2"></i>Edit
                                                    </a>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <button class="dropdown-item text-danger delete-btn"
                                                            data-record-id="@record.Id"
                                                            data-record-name="@record.DriverName - @record.DutyOfCareRecordType.ToString()">
                                                        <i class="fas fa-trash me-2"></i>Delete
                                                    </button>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                    <h6 class="card-title">@record.DriverName</h6>
                                    <p class="card-text">
                                        <small class="text-muted">
                                            <i class="fas fa-car me-1"></i>@record.VehicleDescription
                                        </small><br>
                                        <span class="badge bg-primary">@record.DutyOfCareRecordType.ToString()</span>
                                        @{
                                            var cardStatusClass = record.DutyOfCareStatus switch
                                            {
                                                DriverDutyOfCareStatus.Compliant => "badge-compliant",
                                                DriverDutyOfCareStatus.PendingReview => "badge-pending",
                                                DriverDutyOfCareStatus.ActionRequired => "badge-action",
                                                _ => "badge-secondary"
                                            };
                                            var cardStatusText = record.DutyOfCareStatus.ToString()
                                                .Replace("PendingReview", "Pending Review")
                                                .Replace("ActionRequired", "Action Required");
                                        }
                                        <span class="status-badge @cardStatusClass">@cardStatusText</span>
                                    </p>
                                    <div class="mb-2">
                                        <div class="d-flex justify-content-between mb-1">
                                            <span>Health Check:</span>
                                            @if (record.IsFitToDrive)
                                            {
                                                <span class="text-success"><i class="fas fa-check-circle"></i> Fit</span>
                                            }
                                            else
                                            {
                                                <span class="text-danger"><i class="fas fa-times-circle"></i> Not Fit</span>
                                            }
                                        </div>
                                        <div class="d-flex justify-content-between mb-1">
                                            <span>Vehicle Check:</span>
                                            @if (record.VehiclePreCheckCompleted)
                                            {
                                                <span class="text-success"><i class="fas fa-check-circle"></i> Completed</span>
                                            }
                                            else
                                            {
                                                <span class="text-danger"><i class="fas fa-times-circle"></i> Not Completed</span>
                                            }
                                        </div>
                                        <div class="d-flex justify-content-between">
                                            <span>Issues:</span>
                                            @if (record.ReportsVehicleIssues || record.ReportsFatigue)
                                            {
                                                <span class="text-warning"><i class="fas fa-exclamation-triangle"></i> Reported</span>
                                            }
                                            else
                                            {
                                                <span class="text-success"><i class="fas fa-check"></i> None</span>
                                            }
                                        </div>
                                    </div>
                                </div>
                                <div class="card-footer bg-transparent">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <small class="text-muted">
                                            <i class="fas fa-calendar me-1"></i>@record.Date.ToString("MMM dd, yyyy")
                                        </small>
                                        <small class="text-muted">
                                            <i class="fas fa-clock me-1"></i>@record.DeclarationTimestamp.ToString("HH:mm")
                                        </small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Empty State -->
    <div id="emptyState" class="text-center py-5" style="display: none;">
        <i class="fas fa-search fa-3x text-muted mb-3"></i>
        <h4 class="text-muted">No records found</h4>
        <p class="text-muted">Try adjusting your search criteria or filters</p>
        <a asp-action="Create" class="btn btn-primary">
            <i class="fas fa-plus me-2"></i>Create New Record
        </a>
    </div>
</div>

<!-- Details Modal -->
<div class="modal fade" id="detailsModal" tabindex="-1" aria-labelledby="detailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="detailsModalLabel">
                    <i class="fas fa-info-circle me-2"></i>Record Details
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="d-flex justify-content-center py-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteModalLabel">
                    <i class="fas fa-exclamation-triangle me-2"></i>Confirm Delete
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete the record <strong id="deleteRecordName"></strong>?</p>
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    This action cannot be undone.
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form id="deleteForm" method="post" class="d-inline">
                    <input type="hidden" name="id" id="deleteRecordId" />
                    <button type="submit" class="btn btn-danger">
                        <i class="fas fa-trash me-1"></i>Delete Record
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function(tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });

            // Initialize date pickers
            flatpickr(".flatpickr", {
                dateFormat: "Y-m-d",
                allowInput: true
            });

            // Search and filter functionality
            const searchInput = document.getElementById('searchInput');
            const statusFilter = document.getElementById('statusFilter');
            const typeFilter = document.getElementById('typeFilter');
            const dateFrom = document.getElementById('dateFrom');
            const dateTo = document.getElementById('dateTo');
            const applyDateFilter = document.getElementById('applyDateFilter');
            const tableRows = document.querySelectorAll('.record-row');
            const recordCards = document.querySelectorAll('.record-card');
            const emptyState = document.getElementById('emptyState');
            const tableContainer = document.getElementById('tableContainer');
            const cardContainer = document.getElementById('cardContainer');

            function filterRecords() {
                const searchTerm = searchInput.value.toLowerCase();
                const selectedStatus = statusFilter.value.toLowerCase();
                const selectedType = typeFilter.value.toLowerCase();
                const fromDate = dateFrom.value;
                const toDate = dateTo.value;
                
                let visibleCount = 0;

                // Filter table rows
                tableRows.forEach(row => {
                    const driverName = row.dataset.driver || '';
                    const vehicleName = row.dataset.vehicle || '';
                    const status = row.dataset.status || '';
                    const type = row.dataset.type || '';
                    const date = row.dataset.date || '';

                    const matchesSearch = driverName.includes(searchTerm) || 
                                        vehicleName.includes(searchTerm);

                    const matchesStatus = !selectedStatus || status === selectedStatus;
                    const matchesType = !selectedType || type === selectedType;
                    
                    let matchesDate = true;
                    if (fromDate && date < fromDate) {
                        matchesDate = false;
                    }
                    if (toDate && date > toDate) {
                        matchesDate = false;
                    }

                    if (matchesSearch && matchesStatus && matchesType && matchesDate) {
                        row.style.display = '';
                        visibleCount++;
                    } else {
                        row.style.display = 'none';
                    }
                });

                // Filter cards
                recordCards.forEach(card => {
                    const driverName = card.dataset.driver || '';
                    const vehicleName = card.dataset.vehicle || '';
                    const status = card.dataset.status || '';
                    const type = card.dataset.type || '';
                    const date = card.dataset.date || '';

                    const matchesSearch = driverName.includes(searchTerm) || 
                                        vehicleName.includes(searchTerm);

                    const matchesStatus = !selectedStatus || status === selectedStatus;
                    const matchesType = !selectedType || type === selectedType;
                    
                    let matchesDate = true;
                    if (fromDate && date < fromDate) {
                        matchesDate = false;
                    }
                    if (toDate && date > toDate) {
                        matchesDate = false;
                    }

                    if (matchesSearch && matchesStatus && matchesType && matchesDate) {
                        card.style.display = '';
                    } else {
                        card.style.display = 'none';
                    }
                });

                // Show/hide empty state
                if (visibleCount === 0) {
                    emptyState.style.display = 'block';
                    tableContainer.style.display = 'none';
                    cardContainer.style.display = 'none';
                } else {
                    emptyState.style.display = 'none';
                    if (document.getElementById('tableView').classList.contains('active')) {
                        tableContainer.style.display = 'block';
                        cardContainer.style.display = 'none';
                    } else {
                        tableContainer.style.display = 'none';
                        cardContainer.style.display = 'block';
                    }
                }
            }

            searchInput.addEventListener('input', filterRecords);
            statusFilter.addEventListener('change', filterRecords);
            typeFilter.addEventListener('change', filterRecords);
            applyDateFilter.addEventListener('click', filterRecords);

            // View toggle
            document.getElementById('tableView').addEventListener('click', function() {
                this.classList.add('active');
                document.getElementById('cardView').classList.remove('active');
                tableContainer.style.display = 'block';
                cardContainer.style.display = 'none';
                filterRecords(); // Reapply filters to ensure consistency
            });

            document.getElementById('cardView').addEventListener('click', function() {
                this.classList.add('active');
                document.getElementById('tableView').classList.remove('active');
                tableContainer.style.display = 'none';
                cardContainer.style.display = 'block';
                filterRecords(); // Reapply filters to ensure consistency
            });

            // Table sorting
            document.querySelectorAll('.sortable').forEach(header => {
                header.addEventListener('click', function() {
                    const sortType = this.dataset.sort;
                    const table = document.getElementById('recordsTable');
                    const tbody = table.querySelector('tbody');
                    const rows = Array.from(tbody.querySelectorAll('tr'));
                    
                    const isAscending = this.classList.contains('sort-asc');
                    
                    // Remove all sort classes
                    document.querySelectorAll('.sortable').forEach(h => {
                        h.classList.remove('sort-asc', 'sort-desc');
                    });

                    // Add appropriate sort class
                    if (isAscending) {
                        this.classList.add('sort-desc');
                    } else {
                        this.classList.add('sort-asc');
                    }

                    rows.sort((a, b) => {
                        let aValue, bValue;
                        
                        switch(sortType) {
                            case 'date':
                                aValue = a.dataset.date || '';
                                bValue = b.dataset.date || '';
                                break;
                            case 'driver':
                                aValue = a.dataset.driver || '';
                                bValue = b.dataset.driver || '';
                                break;
                            case 'vehicle':
                                aValue = a.dataset.vehicle || '';
                                bValue = b.dataset.vehicle || '';
                                break;
                            case 'type':
                                aValue = a.dataset.type || '';
                                bValue = b.dataset.type || '';
                                break;
                            case 'status':
                                aValue = a.dataset.status || '';
                                bValue = b.dataset.status || '';
                                break;
                            default:
                                return 0;
                        }

                        if (isAscending) {
                            return bValue.localeCompare(aValue);
                        } else {
                            return aValue.localeCompare(bValue);
                        }
                    });

                    // Re-append sorted rows
                    rows.forEach(row => tbody.appendChild(row));
                });
            });

            // Details modal
            const detailsModal = document.getElementById('detailsModal');
            detailsModal.addEventListener('show.bs.modal', function(event) {
                const button = event.relatedTarget;
                const url = button.getAttribute('data-url');
                const body = detailsModal.querySelector('.modal-body');
                
                body.innerHTML = `
                    <div class="d-flex justify-content-center py-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                `;
                
                fetch(url)
                    .then(response => response.text())
                    .then(html => {
                        body.innerHTML = html;
                        body.classList.add('fade-in');
                    })
                    .catch(error => {
                        body.innerHTML = `
                            <div class="alert alert-danger">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                Error loading record details. Please try again.
                            </div>
                        `;
                    });
            });

            // Delete confirmation
            const deleteModal = document.getElementById('deleteModal');
            document.querySelectorAll('.delete-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const recordId = this.dataset.recordId;
                    const recordName = this.dataset.recordName;
                    
                    document.getElementById('deleteRecordId').value = recordId;
                    document.getElementById('deleteRecordName').textContent = recordName;
                    document.getElementById('deleteForm').action = '@Url.Action("Delete")';
                    
                    new bootstrap.Modal(deleteModal).show();
                });
            });
        });
    </script>
