@using FleetManager.Business.ViewModels
@model FineTollDetailsViewModel

@{
    Layout = null;
}
<style>
    .detail-card {
        border: none;
        border-radius: 12px;
        box-shadow: 0 2px 15px rgba(0,0,0,0.08);
        margin-bottom: 20px;
        overflow: hidden;
    }

    .detail-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 20px;
        margin: -15px -15px 20px -15px;
    }

        .detail-header.fine {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        }

        .detail-header.toll {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        }

    .detail-row {
        padding: 12px 0;
        border-bottom: 1px solid #f1f3f4;
        display: flex;
        align-items: center;
    }

        .detail-row:last-child {
            border-bottom: none;
        }

    .detail-label {
        font-weight: 600;
        color: #495057;
        min-width: 140px;
        display: flex;
        align-items: center;
        margin-bottom: 0;
    }

    .detail-value {
        color: #212529;
        margin-bottom: 0;
        flex: 1;
    }

    .detail-icon {
        margin-right: 8px;
        color: #6c757d;
        width: 16px;
    }

    .status-badge {
        padding: 8px 16px;
        border-radius: 25px;
        font-weight: 600;
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        display: inline-flex;
        align-items: center;
    }

    .status-paid {
        background: linear-gradient(135deg, #d4edda, #c3e6cb);
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .status-unpaid {
        background: linear-gradient(135deg, #f8d7da, #f5c6cb);
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    .status-pending {
        background: linear-gradient(135deg, #fff3cd, #ffeaa7);
        color: #856404;
        border: 1px solid #ffeaa7;
    }

    .status-overdue {
        background: linear-gradient(135deg, #dc3545, #c82333);
        color: white;
        border: 1px solid #c82333;
    }

    .amount-highlight {
        background: linear-gradient(135deg, #ff6b6b, #ee5a24);
        color: white;
        padding: 15px 20px;
        border-radius: 10px;
        text-align: center;
        margin: 15px 0;
        box-shadow: 0 4px 15px rgba(255, 107, 107, 0.3);
    }

    .timeline-item {
        position: relative;
        padding-left: 30px;
        margin-bottom: 15px;
    }

        .timeline-item::before {
            content: '';
            position: absolute;
            left: 8px;
            top: 8px;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: #007bff;
        }

        .timeline-item::after {
            content: '';
            position: absolute;
            left: 11px;
            top: 16px;
            width: 2px;
            height: calc(100% - 8px);
            background: #e9ecef;
        }

        .timeline-item:last-child::after {
            display: none;
        }

    .notes-section {
        background: #f8f9fa;
        border-left: 4px solid #007bff;
        padding: 15px;
        border-radius: 0 8px 8px 0;
        margin: 15px 0;
    }

    .driver-info {
        background: linear-gradient(135deg, #74b9ff, #0984e3);
        color: white;
        padding: 15px;
        border-radius: 10px;
        margin: 15px 0;
    }

    .vehicle-info {
        background: linear-gradient(135deg, #00b894, #00a085);
        color: white;
        padding: 15px;
        border-radius: 10px;
        margin: 15px 0;
    }

    .quick-actions {
        margin-top: 20px;
        padding-top: 20px;
        border-top: 2px solid #f1f3f4;
    }

    .minimal-badge {
        background: linear-gradient(135deg, #a29bfe, #6c5ce7);
        color: white;
        padding: 6px 12px;
        border-radius: 15px;
        font-size: 0.8rem;
        font-weight: 600;
    }

    .type-badge {
        padding: 8px 16px;
        border-radius: 20px;
        font-weight: 600;
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        display: inline-flex;
        align-items: center;
    }

    .type-fine {
        background: linear-gradient(135deg, #fdcb6e, #e17055);
        color: #2d3436;
    }

    .type-toll {
        background: linear-gradient(135deg, #74b9ff, #0984e3);
        color: white;
    }
</style>

<div class="detail-card">
    <div class="detail-header @(Model.Type.ToString().ToLower())">
        <div class="row align-items-center">
            <div class="col-md-8">
                <h4 class="mb-2">
                    <i class="bi bi-@(Model.Type.ToString() == "Fine" ? "exclamation-triangle" : "signpost") me-2"></i>
                    @Model.Title
                </h4>
                <p class="mb-0 opacity-75">
                    <i class="bi bi-calendar me-2"></i>
                    Logged on @Model.CreatedDate.ToString("dddd, MMMM dd, yyyy 'at' HH:mm")
                </p>
            </div>
            <div class="col-md-4 text-end">
                <div class="type-badge type-@(Model.Type.ToString().ToLower())">
                    <i class="bi bi-@(Model.Type.ToString() == "Fine" ? "exclamation-triangle" : "signpost") me-2"></i>
                    @Model.Type
                </div>
            </div>
        </div>
    </div>

    <!-- Amount Highlight -->
    <div class="amount-highlight">
        <h3 class="mb-1">
            <i class="bi bi-currency-exchange me-2"></i>
            @String.Format(System.Globalization.CultureInfo.GetCultureInfo("en-NG"), "{0:C}", Model.Amount)
        </h3>
        <small>Total Amount</small>
    </div>

    <!-- Key Information Cards -->
    <div class="row mb-3">
        <div class="col-md-6">
            <div class="driver-info">
                <h6 class="mb-2">
                    <i class="bi bi-person-circle me-2"></i>Driver Information
                </h6>
                <h5 class="mb-1">@Model.DriverName</h5>
                <small class="opacity-75">Responsible Driver</small>
            </div>
        </div>
        <div class="col-md-6">
            <div class="vehicle-info">
                <h6 class="mb-2">
                    <i class="bi bi-truck me-2"></i>Vehicle Information
                </h6>
                <h5 class="mb-1">@Model.VehicleDescription</h5>
                <small class="opacity-75">Involved Vehicle</small>
            </div>
        </div>
    </div>

    <!-- Detailed Information -->
    <div class="row">
        <div class="col-md-6">
            <div class="detail-row">
                <div class="detail-label">
                    <i class="bi bi-info-circle detail-icon"></i>
                    Status:
                </div>
                <div class="detail-value">
                    <span class="status-badge status-@(Model.Status.ToString().ToLower().Replace(" ", ""))">
                        <i class="bi bi-@(Model.Status.ToString() == "Paid" ? "check-circle" : Model.Status.ToString() == "Unpaid") me-2"></i>
                        @Model.Status
                    </span>
                </div>
            </div>

            <div class="detail-row">
                <div class="detail-label">
                    <i class="bi bi-calendar-check detail-icon"></i>
                    Date Logged:
                </div>
                <div class="detail-value">
                    <strong>@Model.CreatedDate.ToString("dd MMM yyyy")</strong>
                    <br><small class="text-muted">@Model.CreatedDate.ToString("HH:mm")</small>
                </div>
            </div>

            @if (Model.PaidDate.HasValue)
            {
                <div class="detail-row">
                    <div class="detail-label">
                        <i class="bi bi-calendar-event detail-icon"></i>
                        Paid Date:
                    </div>
                    <div class="detail-value">
                        <strong class="text-success">@Model.PaidDate.Value.ToString("dd MMM yyyy")</strong>
                        <br><small class="text-muted">@Model.PaidDate.Value.ToString("HH:mm")</small>
                    </div>
                </div>
            }

            <div class="detail-row">
                <div class="detail-label">
                    <i class="bi bi-shield-check detail-icon"></i>
                    Driver Coverage:
                </div>
                <div class="detail-value">
                    @if (Model.IsMinimal)
                    {
                        <span class="minimal-badge">
                            <i class="bi bi-check-circle me-1"></i>
                            Covered by Driver
                        </span>
                    }
                    else
                    {
                        <span class="badge bg-secondary">
                            <i class="bi bi-building me-1"></i>
                            Company Responsibility
                        </span>
                    }
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <!-- Timeline -->
            <h6 class="mb-3">
                <i class="bi bi-clock-history me-2"></i>Timeline
            </h6>

            <div class="timeline-item">
                <strong>Created</strong>
                <br><small class="text-muted">@Model.CreatedDate.ToString("dd MMM yyyy 'at' HH:mm")</small>
                <br><small>Initial entry logged</small>
            </div>

            @if (Model.PaidDate.HasValue)
            {
                <div class="timeline-item">
                    <strong class="text-success">Payment Completed</strong>
                    <br><small class="text-muted">@Model.PaidDate.Value.ToString("dd MMM yyyy 'at' HH:mm")</small>
                    <br><small>Fine/Toll settled</small>
                </div>
            }
            else
            {
                <div class="timeline-item">
                    <strong class="text-warning">Pending Payment</strong>
                    <br><small class="text-muted">
                        @((DateTime.Now - Model.CreatedDate).Days) days outstanding
                    </small>
                </div>
            }
        </div>
    </div>

    <!-- Reason Section -->
    @if (!string.IsNullOrEmpty(Model.Reason))
    {
        <div class="row mt-3">
            <div class="col-12">
                <h6><i class="bi bi-exclamation-diamond me-2"></i>Reason</h6>
                <div class="notes-section">
                    <p class="mb-0">@Model.Reason</p>
                </div>
            </div>
        </div>
    }

    <!-- Notes Section -->
    @if (!string.IsNullOrEmpty(Model.Notes))
    {
        <div class="row mt-3">
            <div class="col-12">
                <h6><i class="bi bi-journal-text me-2"></i>Additional Notes</h6>
                <div class="notes-section">
                    <p class="mb-0">@Model.Notes</p>
                </div>
            </div>
        </div>
    }

    <!-- Quick Actions -->
    <div class="quick-actions">
        <div class="row">
            <div class="col-md-6">
                <h6 class="mb-3"><i class="bi bi-lightning-charge me-2"></i>Quick Actions</h6>
            </div>
            <div class="col-md-6 text-end">
                <small class="text-muted">ID: #@Model.Id</small>
            </div>
        </div>

        <div class="d-flex flex-wrap gap-2">
            @if (Model.Status.ToString() != "Paid")
            {
                <button type="button" class="btn btn-success btn-sm" onclick="markAsPaid(@Model.Id)">
                    <i class="bi bi-check-circle me-1"></i>Mark as Paid
                </button>
            }

            <button type="button" class="btn btn-primary btn-sm" onclick="editItem(@Model.Id)">
                <i class="bi bi-pencil me-1"></i>Edit Details
            </button>

            <button type="button" class="btn btn-info btn-sm" onclick="printDetails()">
                <i class="bi bi-printer me-1"></i>Print
            </button>

            <button type="button" class="btn btn-secondary btn-sm" onclick="downloadPDF(@Model.Id)">
                <i class="bi bi-file-pdf me-1"></i>Export PDF
            </button>

            @if (Model.Status.ToString() == "Paid")
            {
                <button type="button" class="btn btn-outline-success btn-sm" onclick="generateReceipt(@Model.Id)">
                    <i class="bi bi-receipt me-1"></i>Generate Receipt
                </button>
            }
        </div>
    </div>
</div>

<script>
    function markAsPaid(id) {
        if (confirm('Mark this item as paid?')) {
            $.ajax({
                url: '@Url.Action("UpdateStatus", "ManageFineToll")',
                type: 'POST',
                data: {
                    id: id,
                    status: 'Paid',
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                },
                success: function() {
                    // Close modal and refresh parent page
                    $('#detailsModal').modal('hide');
                    location.reload();
                },
                error: function() {
                    alert('Error updating status. Please try again.');
                }
            });
        }
    }

    function editItem(id) {
        // Close current modal and open edit modal
        $('#detailsModal').modal('hide');
        // Load edit form - implement based on your edit action
        window.location.href = '@Url.Action("Edit", "ManageFineToll")?id=' + id;
    }

    function printDetails() {
        // Print current modal content
        var printContent = $('#detailsModal .modal-body').html();
        var printWindow = window.open('', '_blank');
        printWindow.document.write(`
            <html>
                <head>
                    <title>Fine/Toll Details</title>
                    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
                    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css" rel="stylesheet">
                    <style>
                        body { font-family: Arial, sans-serif; margin: 20px; }
                        .detail-header { background: #f8f9fa !important; color: #333 !important; }
                        .amount-highlight { background: #f8f9fa !important; color: #333 !important; border: 2px solid #ddd; }
                        .driver-info, .vehicle-info { background: #f8f9fa !important; color: #333 !important; border: 1px solid #ddd; }
    @@media print {
                            .quick-actions { display: none !important; }
                            .btn { display: none !important; }
                        }
                    </style>
                </head>
                <body onload="window.print(); window.close();">
                    ${printContent}
                </body>
            </html>
        `);
        printWindow.document.close();
    }

    function downloadPDF(id) {
        // Implement PDF download
        window.open('@Url.Action("DownloadPDF", "ManageFineToll")?id=' + id, '_blank');
    }

    function generateReceipt(id) {
        // Generate payment receipt
        window.open('@Url.Action("GenerateReceipt", "ManageFineToll")?id=' + id, '_blank');
    }
</script>















@* 
@using FleetManager.Business.ViewModels
@model FineTollDetailsViewModel

<div>
    <dl class="row">
        <dt class="col-sm-3">Driver</dt>
        <dd class="col-sm-9">@Model.DriverName</dd>
        <dt class="col-sm-3">Vehicle</dt>
        <dd class="col-sm-9">@Model.VehicleDescription</dd>
        <dt class="col-sm-3">Type</dt>
        <dd class="col-sm-9">@Model.Type</dd>
        <dt class="col-sm-3">Title</dt>
        <dd class="col-sm-9">@Model.Title</dd>
        <dt class="col-sm-3">Amount</dt>
        <dd class="col-sm-9">@Model.Amount.ToString("C")</dd>
        <dt class="col-sm-3">Reason</dt>
        <dd class="col-sm-9">@Model.Reason</dd>
        <dt class="col-sm-3">Notes</dt>
        <dd class="col-sm-9">@Model.Notes</dd>
        <dt class="col-sm-3">Covered by Driver?</dt>
        <dd class="col-sm-9">@(Model.IsMinimal ? "Yes" : "No")</dd>
        <dt class="col-sm-3">Status</dt>
        <dd class="col-sm-9">@Model.Status</dd>
        <dt class="col-sm-3">Paid on</dt>
        <dd class="col-sm-9">@(Model.PaidDate?.ToString("dd MMM yyyy") ?? "-")</dd>
        <dt class="col-sm-3">Created on</dt>
        <dd class="col-sm-9">@Model.CreatedDate.ToString("dd MMM yyyy") </dd>
    </dl>
</div>
 *@