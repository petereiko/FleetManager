@using FleetManager.Business.ViewModels.Schedule
@model TimeOffPendingListViewModel
@{
    ViewData["Title"] = "Pending Time-Off Requests";
}

<link href="https://cdnjs.cloudflare.com/ajax/libs/toastify-js/1.12.0/toastify.min.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />


<style>
    :root {
        --primary-color: #667eea;
        --primary-dark: #5a6fd8;
        --success-color: #48bb78;
        --danger-color: #f56565;
        --warning-color: #ed8936;
        --info-color: #4299e1;
        --light-bg: #f8fafc;
        --card-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        --card-shadow-hover: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        --border-radius: 12px;
        --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    body {
        background: whitesmoke;
        min-height: 100vh;
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }

    .main-container {
        background: var(--light-bg);
        min-height: 100vh;
        padding: 2rem 0;
    }

    .page-header {
        background: white;
        border-radius: var(--border-radius);
        box-shadow: var(--card-shadow);
        margin-bottom: 2rem;
        padding: 2rem;
        position: relative;
        overflow: hidden;
    }

        .page-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, var(--primary-color), var(--info-color));
        }

    .page-title {
        font-size: 2.5rem;
        font-weight: 700;
        color: #2d3748;
        margin: 0;
        display: flex;
        align-items: center;
        gap: 1rem;
    }

        .page-title i {
            color: var(--primary-color);
        }

    .stats-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .stat-card {
        background: white;
        border-radius: var(--border-radius);
        padding: 1.5rem;
        box-shadow: var(--card-shadow);
        transition: var(--transition);
        border-left: 4px solid var(--primary-color);
    }

        .stat-card:hover {
            transform: translateY(-2px);
            box-shadow: var(--card-shadow-hover);
        }

    .stat-number {
        font-size: 2rem;
        font-weight: 700;
        color: var(--primary-color);
        margin: 0;
    }

    .stat-label {
        color: #718096;
        font-weight: 500;
        margin: 0.5rem 0 0 0;
    }

    .table-container {
        background: white;
        border-radius: var(--border-radius);
        box-shadow: var(--card-shadow);
        overflow: hidden;
    }

    .table-header {
        padding: 1.5rem 2rem;
        background: linear-gradient(135deg, var(--primary-color), var(--primary-dark));
        color: white;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .table-title {
        font-size: 1.25rem;
        font-weight: 600;
        margin: 0;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .search-container {
        position: relative;
        max-width: 300px;
    }

    .search-input {
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        color: white;
        border-radius: 8px;
        padding: 0.5rem 0.75rem 0.5rem 2.5rem;
        width: 100%;
        transition: var(--transition);
    }

        .search-input::placeholder {
            color: rgba(255, 255, 255, 0.7);
        }

        .search-input:focus {
            outline: none;
            background: rgba(255, 255, 255, 0.2);
            border-color: rgba(255, 255, 255, 0.4);
        }

    .search-icon {
        position: absolute;
        left: 0.75rem;
        top: 50%;
        transform: translateY(-50%);
        color: rgba(255, 255, 255, 0.7);
    }

    .custom-table {
        width: 100%;
        margin: 0;
    }

        .custom-table thead th {
            background: #f8fafc;
            border: none;
            color: #4a5568;
            font-weight: 600;
            padding: 1rem 1.5rem;
            text-transform: uppercase;
            font-size: 0.875rem;
            letter-spacing: 0.05em;
        }

        .custom-table tbody tr {
            transition: var(--transition);
            border-bottom: 1px solid #e2e8f0;
        }

            .custom-table tbody tr:hover {
                background: #f8fafc;
                transform: scale(1.001);
            }

        .custom-table tbody td {
            padding: 1.25rem 1.5rem;
            border: none;
            vertical-align: middle;
        }

    .driver-cell {
        font-weight: 600;
        color: #2d3748;
    }

    .category-badge {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 1rem;
        border-radius: 50px;
        font-size: 0.875rem;
        font-weight: 500;
        background: var(--info-color);
        color: white;
    }

    .date-range {
        color: #4a5568;
        font-weight: 500;
    }

    .reason-text {
        max-width: 200px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        color: #718096;
    }

    .requested-at {
        color: #a0aec0;
        font-size: 0.875rem;
    }

    .status-badge {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 1rem;
        border-radius: 50px;
        font-size: 0.875rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .status-pending {
        background: #fef5e7;
        color: #c05621;
        border: 1px solid #fed7aa;
    }

    .status-approved {
        background: #f0fff4;
        color: #276749;
        border: 1px solid #9ae6b4;
    }

    .status-denied {
        background: #fed7d7;
        color: #c53030;
        border: 1px solid #feb2b2;
    }

    .review-btn {
        background: linear-gradient(135deg, var(--primary-color), var(--primary-dark));
        border: none;
        color: white;
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        font-weight: 500;
        transition: var(--transition);
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

        .review-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
            color: white;
        }

    .modal-content {
        border-radius: var(--border-radius);
        border: none;
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
    }

    .modal-header {
        background: linear-gradient(135deg, var(--primary-color), var(--primary-dark));
        color: white;
        border-radius: var(--border-radius) var(--border-radius) 0 0;
        border-bottom: none;
        padding: 1.5rem 2rem;
    }

    .modal-title {
        font-weight: 600;
        margin: 0;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .close {
        background: none;
        border: none;
        color: white;
        font-size: 1.5rem;
        opacity: 0.8;
        transition: var(--transition);
    }

        .close:hover {
            opacity: 1;
            transform: scale(1.1);
        }

    .empty-state {
        text-align: center;
        padding: 4rem 2rem;
        color: #718096;
    }

        .empty-state i {
            font-size: 4rem;
            color: #cbd5e0;
            margin-bottom: 1rem;
        }

        .empty-state h3 {
            color: #4a5568;
            margin-bottom: 0.5rem;
        }

    @@media (max-width: 768px) {
        .page-title {
            font-size: 2rem;
        }

        .table-header {
            flex-direction: column;
            gap: 1rem;
            align-items: stretch;
        }

        .search-container {
            max-width: none;
        }

        .custom-table {
            font-size: 0.875rem;
        }

            .custom-table thead th,
            .custom-table tbody td {
                padding: 0.75rem 1rem;
            }
    }

    .is-invalid {
        border-color: #dc3545 !important;
        background-color: #fff5f5;
    }

    .text-danger {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 4px;
    }
</style>

<div class="main-container">
    <div class="container-fluid">
        <!-- Page Header -->
        <div class="page-header">
            <h1 class="page-title">
                <i class="fas fa-calendar-check"></i>
                @ViewData["Title"]
            </h1>
        </div>

        <!-- Stats Cards -->
        <div class="stats-container">
            <div class="stat-card">
                <div class="stat-number">@Model.PendingRequests.Count()</div>
                <div class="stat-label">Pending Requests</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">@Model.PendingRequests.Count(r => r.StartDate <= DateTime.Now.AddDays(7))</div>
                <div class="stat-label">Urgent (Within 7 Days)</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">@Model.PendingRequests.GroupBy(r => r.RequestedBy).Count()</div>
                <div class="stat-label">Unique Drivers</div>
            </div>
        </div>

        <!-- Requests Table -->
        <div class="table-container">
            <div class="table-header">
                <h3 class="table-title">
                    <i class="fas fa-list"></i>
                    Requests Awaiting Review
                </h3>
                <div class="search-container">
                    <i class="fas fa-search search-icon"></i>
                    <input type="text" class="search-input" placeholder="Search requests..." id="searchInput">
                </div>
            </div>

            @if (Model.PendingRequests.Any())
            {
                <table class="table custom-table" id="requestsTable">
                    <thead>
                        <tr>
                            <th><i class="fas fa-user"></i> Driver</th>
                            <th><i class="fas fa-tag"></i> Category</th>
                            <th><i class="fas fa-calendar-alt"></i> Dates</th>
                            <th><i class="fas fa-comment"></i> Reason</th>
                            <th><i class="fas fa-clock"></i> Requested</th>
                            <th><i class="fas fa-info-circle"></i> Status</th>
                            <th><i class="fas fa-cogs"></i> Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var r in Model.PendingRequests)
                        {
                            <tr id="req-row-@r.Id">
                                <td class="driver-cell">
                                    <i class="fas fa-user-circle" style="color: var(--primary-color); margin-right: 0.5rem;"></i>
                                    @r.RequestedBy
                                </td>
                                <td>
                                    <span class="category-badge">
                                        <i class="fas fa-tag"></i>
                                        @r.CategoryName
                                    </span>
                                </td>
                                <td class="date-range">
                                    <i class="fas fa-calendar" style="color: var(--info-color); margin-right: 0.5rem;"></i>
                                    @r.StartDate.ToString("d MMM yyyy") – @r.EndDate.ToString("d MMM yyyy")
                                </td>
                                <td class="reason-text" title="@r.Reason">@r.Reason</td>
                                <td class="requested-at">
                                    <i class="fas fa-clock" style="margin-right: 0.5rem;"></i>
                                    @r.RequestedAt.ToString("d MMM yyyy HH:mm")
                                </td>
                                <td class="status-cell">
                                    <span class="status-badge status-@r.Status.ToString().ToLower()">
                                        <i class="fas fa-hourglass-half"></i>
                                        @r.Status
                                    </span>
                                </td>
                                <td>
                                    <button class="btn review-btn" data-id="@r.Id">
                                        <i class="fas fa-eye"></i>
                                        Review
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <div class="empty-state">
                    <i class="fas fa-inbox"></i>
                    <h3>No Pending Requests</h3>
                    <p>All time-off requests have been processed.</p>
                </div>
            }
        </div>
    </div>
</div>

<!-- Review Modal -->
<div class="modal fade" id="reviewModal" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-clipboard-check"></i>
                    Review Request
                </h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body">
                <!-- loaded dynamically -->
            </div>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastify-js/1.12.0/toastify.min.js"></script>
<script>

    let requestId = null;
    // Initialize Modal
        const reviewModalEl = document.getElementById('reviewModal');
        const reviewModal = new bootstrap.Modal(reviewModalEl);


    function ApproveRequest (){
            let comment = document.getElementById("AdminComment");
            let id = requestId;
            const $myform = $('#form');
            const $submitBtn = $myform.find('[type="submit"]');
            const originalText = $submitBtn.html();
             // Add loading state
            $submitBtn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i> Processing...');
            
            // Disable deny button too
            $myform.find('.deny-btn').prop('disabled', true);

            const url = `@Url.Action("Approve")?id=${id}&comment=${comment}`;

            $.ajax({
                url:url,
                type:'get',
                dataType:'json',
                success:function(resp){
                    if (!resp.success) {
                    throw new Error(resp.message || 'Request failed');
                }
                
                Toastify({
                    text: resp.message,
                    duration: 4000,
                    close: true,
                    gravity: 'top',
                    style: { background: "linear-gradient(to right, #48bb78, #38a169)" }
                }).showToast();
                $('#reviewModal').hide();
                setTimeout(()=>window.location.reload(),3000);

                },
                error:function(err){
                    handleError(err);
                }
            })

        }

        function DenyRequest (){

            let commentField = document.getElementById("AdminComment");
            let id = requestId;
            const $myform = $('#form');
            const $denyBtn = $myform.find('[type="button"]');
            const originalText = $denyBtn.html();

            
            const errorContainer = document.getElementById('adminCommentError');

            if (commentField.value.trim() === "") {
                errorContainer.style.display = "block";
                commentField.classList.add("is-invalid");
                commentField.scrollIntoView({ behavior: 'smooth', block: 'center' });
                return;
            }

            // Clear validation styles
            errorContainer.style.display = "none";
            commentField.classList.remove("is-invalid");




             // Add loading state
            $denyBtn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i> Processing...');

            // Disable deny button too
            $myform.find('.approve-btn').prop('disabled', true);

            const url = `@Url.Action("Deny")?id=${id}&comment=${commentField.value}`;

            $.ajax({
                url:url,
                type:'get',
                dataType:'json',
                success:function(resp){
                    if (!resp.success) {
                    throw new Error(resp.message || 'Request failed');
                }

                Toastify({
                    text: resp.message,
                    duration: 4000,
                    close: true,
                    gravity: 'top',
                    style: { background: "linear-gradient(to right, #f56565, #e53e3e)" }
                }).showToast();
                $('#reviewModal').hide();
                setTimeout(()=>window.location.reload(),3000);

                },
                error:function(err){
                    handleError(err);
                }
            })

        }
        

        $(function(){

        // Search Functionality
        $('#searchInput').on('input', function() {
            const searchTerm = $(this).val().toLowerCase();
            $('#requestsTable tbody tr').each(function() {
                const rowText = $(this).text().toLowerCase();
                $(this).toggle(rowText.includes(searchTerm));
            });
        });

        // Review Button Click
        $('.review-btn').on('click', function(){
            const id = $(this).data('id');
            requestId = id;
            const $btn = $(this);

            // Add loading state
            $btn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i> Loading...');

            $.get(`/Admin/TimeOff/Review/${id}`)
                .done(html => {
                    $('#reviewModal .modal-body').html(html);
                    reviewModal.show();
                })
                .fail(() => {
                    Toastify({
                        text: "Failed to load review form",
                        duration: 3000,
                        close: true,
                        gravity: 'top',
                        style: { background: "linear-gradient(to right, #b71c1c, #f44336)" }
                    }).showToast();
                })
                .always(() => {
                    $btn.prop('disabled', false).html('<i class="fas fa-eye"></i> Review');
                });
        });

        // Helper Functions
        function updateRequestStatus(requestId, newStatus, type) {

            const $statusCell = $(`#req-row-${requestId} .status-cell`);
            const iconClass = type === 'approved' ? 'fa-check-circle' : 'fa-times-circle';
            const statusClass = `status-${type}`;

            $statusCell.html(`
                <span class="status-badge ${statusClass}">
                    <i class="fas ${iconClass}"></i>
                    ${newStatus}
                </span>
            `);

            // Add a subtle animation
            $(`#req-row-${requestId}`).addClass('table-success').delay(2000).queue(function(){
                $(this).removeClass('table-success').dequeue();
            });
        }

        function handleError(err) {
            console.error('Error:', err);
            let msg = "Server error occurred";

            if (err.responseJSON && err.responseJSON.message) {
                msg = err.responseJSON.message;
            } else if (err.responseText) {
                try {
                    const response = JSON.parse(err.responseText);
                    msg = response.message || msg;
                } catch (e) {
                    msg = err.responseText;
                }
            } else if (err.message) {
                msg = err.message;
            }

            Toastify({
                text: msg,
                duration: 5000,
                close: true,
                gravity: 'top',
                style: { background: "linear-gradient(to right, #b71c1c, #f44336)" }
            }).showToast();
        }

        // Auto-refresh every 2 minutes
        setInterval(() => {
            if (!reviewModal._isShown) {
                location.reload();
            }
        }, 120000);
    });

</script>