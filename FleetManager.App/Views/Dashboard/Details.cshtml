@using FleetManager.Business.DataObjects
@using FleetManager.Business
@model DriverDto
@{
    ViewData["Title"] = $"{Model.FirstName} {Model.LastName} - Driver Profile";
    var fullName = $"{Model.FirstName} {Model.LastName}";
    var licenseExpiry = Model.LicenseExpiryDate.HasValue ? (Model.LicenseExpiryDate.Value - DateTime.Now).Days : (int?)null;
    var isLicenseExpired = licenseExpiry < 0;
    var isLicenseExpiring = licenseExpiry >= 0 && licenseExpiry <= 30;
}

<style>
    @@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap');
    @@import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500&display=swap');

    :root {
        --primary-950: #0f172a;
        --primary-900: #1e293b;
        --primary-800: #334155;
        --primary-700: #475569;
        --primary-600: #64748b;
        --primary-500: #94a3b8;
        --primary-400: #cbd5e1;
        --primary-300: #e2e8f0;
        --primary-200: #f1f5f9;
        --primary-100: #f8fafc;
        --primary-50: #fdfdfe;
        --accent-blue: #3b82f6;
        --accent-blue-light: #93c5fd;
        --accent-green: #10b981;
        --accent-green-light: #86efac;
        --accent-red: #ef4444;
        --accent-red-light: #fca5a5;
        --accent-orange: #f59e0b;
        --accent-orange-light: #fcd34d;
        --accent-purple: #8b5cf6;
        --accent-purple-light: #c4b5fd;
        --gradient-brand: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        --gradient-success: linear-gradient(135deg, #10b981 0%, #059669 100%);
        --gradient-warning: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
        --gradient-danger: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
        --gradient-surface: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
        --gradient-hero: linear-gradient(135deg, #0f172a 0%, #1e293b 50%, #334155 100%);
        --shadow-xs: 0 1px 2px rgba(0, 0, 0, 0.05);
        --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.1), 0 1px 2px rgba(0, 0, 0, 0.06);
        --shadow-md: 0 4px 6px rgba(0, 0, 0, 0.05), 0 2px 4px rgba(0, 0, 0, 0.06);
        --shadow-lg: 0 10px 15px rgba(0, 0, 0, 0.1), 0 4px 6px rgba(0, 0, 0, 0.05);
        --shadow-xl: 0 20px 25px rgba(0, 0, 0, 0.1), 0 10px 10px rgba(0, 0, 0, 0.04);
        --shadow-2xl: 0 25px 50px rgba(0, 0, 0, 0.15);
        --shadow-inner: inset 0 2px 4px rgba(0, 0, 0, 0.06);
        --blur-sm: blur(4px);
        --blur-md: blur(8px);
        --blur-lg: blur(16px);
        --animate-duration: 0.3s;
        --animate-curve: cubic-bezier(0.4, 0, 0.2, 1);
    }

    * {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        background: var(--primary-50);
        color: var(--primary-900);
        line-height: 1.6;
        overflow-x: hidden;
    }

    .driver-profile-page {
        min-height: 100vh;
        position: relative;
    }

    /* Hero Section with Glassmorphism */
    .hero-section {
        background: var(--gradient-hero);
        position: relative;
        overflow: hidden;
        margin-bottom: 2rem;
    }

        .hero-section::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-image: radial-gradient(circle at 20% 80%, rgba(59, 130, 246, 0.1) 0%, transparent 50%), radial-gradient(circle at 80% 20%, rgba(139, 92, 246, 0.1) 0%, transparent 50%), radial-gradient(circle at 40% 40%, rgba(16, 185, 129, 0.05) 0%, transparent 50%);
            animation: float 20s ease-in-out infinite;
        }

    @@keyframes float {
        0%, 100% {
            transform: translateY(0px);
        }

        50% {
            transform: translateY(-20px);
        }
    }

    .hero-content {
        position: relative;
        z-index: 2;
        padding: 3rem 2rem;
        max-width: 1400px;
        margin: 0 auto;
    }

    .breadcrumb-nav {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-bottom: 2rem;
        font-size: 0.875rem;
        opacity: 0.8;
    }

        .breadcrumb-nav a {
            color: var(--primary-300);
            text-decoration: none;
            transition: color var(--animate-duration) var(--animate-curve);
        }

            .breadcrumb-nav a:hover {
                color: white;
            }

    .breadcrumb-separator {
        color: var(--primary-500);
    }

    .hero-main {
        display: grid;
        grid-template-columns: auto 1fr auto;
        gap: 2rem;
        align-items: center;
    }

    .driver-avatar-hero {
        width: 120px;
        height: 120px;
        border-radius: 50%;
        overflow: hidden;
        position: relative;
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        border: 3px solid rgba(255, 255, 255, 0.2);
        box-shadow: var(--shadow-2xl);
    }

        .driver-avatar-hero img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

    .hero-info h1 {
        color: white;
        font-size: 2.5rem;
        font-weight: 800;
        margin-bottom: 0.5rem;
        letter-spacing: -0.025em;
    }

    .hero-subtitle {
        color: var(--primary-300);
        font-size: 1.25rem;
        font-weight: 500;
        margin-bottom: 1rem;
    }

    .hero-badges {
        display: flex;
        gap: 1rem;
        flex-wrap: wrap;
    }

    .hero-badge {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 1rem;
        border-radius: 2rem;
        font-size: 0.875rem;
        font-weight: 600;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .badge-active {
        background: rgba(16, 185, 129, 0.2);
        color: var(--accent-green-light);
        border-color: rgba(16, 185, 129, 0.3);
    }

    .badge-inactive {
        background: rgba(239, 68, 68, 0.2);
        color: var(--accent-red-light);
        border-color: rgba(239, 68, 68, 0.3);
    }

    .badge-employment {
        background: rgba(245, 158, 11, 0.2);
        color: var(--accent-orange-light);
        border-color: rgba(245, 158, 11, 0.3);
    }

    .hero-actions {
        display: flex;
        gap: 1rem;
        flex-wrap: wrap;
    }

    .btn {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.875rem 1.5rem;
        border-radius: 0.75rem;
        font-weight: 600;
        font-size: 0.875rem;
        text-decoration: none;
        border: none;
        cursor: pointer;
        transition: all var(--animate-duration) var(--animate-curve);
        position: relative;
        overflow: hidden;
        backdrop-filter: blur(10px);
    }

        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.1);
            opacity: 0;
            transition: opacity var(--animate-duration) var(--animate-curve);
        }

        .btn:hover::before {
            opacity: 1;
        }

    .btn-primary {
        background: rgba(255, 255, 255, 0.15);
        color: white;
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .btn-secondary {
        background: rgba(0, 0, 0, 0.2);
        color: var(--primary-300);
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .btn:hover {
        transform: translateY(-2px);
        box-shadow: var(--shadow-xl);
    }

    /* Main Content */
    .main-content {
        max-width: 1400px;
        margin: 0 auto;
        padding: 0 2rem 3rem;
        position: relative;
        z-index: 1;
    }

    /* Stats Cards */
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .stat-card {
        background: var(--gradient-surface);
        border-radius: 1rem;
        padding: 1.5rem;
        box-shadow: var(--shadow-md);
        border: 1px solid var(--primary-200);
        position: relative;
        overflow: hidden;
        transition: all var(--animate-duration) var(--animate-curve);
    }

        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: var(--gradient-brand);
        }

        .stat-card:hover {
            transform: translateY(-4px);
            box-shadow: var(--shadow-xl);
        }

    .stat-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 0.5rem;
    }

    .stat-label {
        color: var(--primary-600);
        font-size: 0.875rem;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .stat-icon {
        width: 24px;
        height: 24px;
        color: var(--accent-blue);
        opacity: 0.7;
    }

    .stat-value {
        color: var(--primary-900);
        font-size: 1.5rem;
        font-weight: 700;
        margin-bottom: 0.25rem;
    }

    .stat-description {
        color: var(--primary-600);
        font-size: 0.875rem;
    }

    /* Detailed Information Grid */
    .details-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 2rem;
        margin-bottom: 2rem;
    }

    .info-panel {
        background: var(--gradient-surface);
        border-radius: 1.25rem;
        overflow: hidden;
        box-shadow: var(--shadow-lg);
        border: 1px solid var(--primary-200);
        transition: all var(--animate-duration) var(--animate-curve);
    }

        .info-panel:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-xl);
        }

    .panel-header {
        background: var(--gradient-brand);
        color: white;
        padding: 1.5rem;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .panel-icon {
        width: 24px;
        height: 24px;
        opacity: 0.9;
    }

    .panel-title {
        font-size: 1.125rem;
        font-weight: 600;
        margin: 0;
    }

    .panel-content {
        padding: 2rem;
    }

    .info-list {
        display: grid;
        gap: 1.5rem;
    }

    .info-item {
        display: grid;
        gap: 0.5rem;
    }

    .info-label {
        color: var(--primary-600);
        font-size: 0.875rem;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .info-value {
        color: var(--primary-900);
        font-size: 1rem;
        font-weight: 500;
        min-height: 1.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

        .info-value.monospace {
            font-family: 'JetBrains Mono', monospace;
            font-size: 0.875rem;
            background: var(--primary-100);
            padding: 0.5rem 0.75rem;
            border-radius: 0.5rem;
            border: 1px solid var(--primary-200);
        }

        .info-value.empty {
            color: var(--primary-500);
            font-style: italic;
        }

    /* License Status Indicators */
    .license-status {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 1rem;
        border-radius: 2rem;
        font-size: 0.875rem;
        font-weight: 600;
    }

    .license-valid {
        background: rgba(16, 185, 129, 0.1);
        color: var(--accent-green);
        border: 1px solid rgba(16, 185, 129, 0.2);
    }

    .license-expiring {
        background: rgba(245, 158, 11, 0.1);
        color: var(--accent-orange);
        border: 1px solid rgba(245, 158, 11, 0.2);
        animation: pulse-warning 2s infinite;
    }

    .license-expired {
        background: rgba(239, 68, 68, 0.1);
        color: var(--accent-red);
        border: 1px solid rgba(239, 68, 68, 0.2);
        animation: pulse-danger 2s infinite;
    }

    @@keyframes pulse-warning {
        0%, 100% {
            opacity: 1;
        }

        50% {
            opacity: 0.7;
        }
    }

    @@keyframes pulse-danger {
        0%, 100% {
            opacity: 1;
        }

        50% {
            opacity: 0.6;
        }
    }

    /* Media Gallery */
    .media-section {
        background: var(--gradient-surface);
        border-radius: 1.25rem;
        overflow: hidden;
        box-shadow: var(--shadow-lg);
        border: 1px solid var(--primary-200);
        margin-bottom: 2rem;
    }

    .media-header {
        background: var(--gradient-brand);
        color: white;
        padding: 1.5rem;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .media-title {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        font-size: 1.125rem;
        font-weight: 600;
        margin: 0;
    }

    .media-count {
        background: rgba(255, 255, 255, 0.2);
        padding: 0.25rem 0.75rem;
        border-radius: 1rem;
        font-size: 0.875rem;
        font-weight: 500;
    }

    .media-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 1rem;
        padding: 2rem;
    }

    .media-card {
        background: white;
        border-radius: 1rem;
        overflow: hidden;
        box-shadow: var(--shadow-sm);
        border: 1px solid var(--primary-200);
        transition: all var(--animate-duration) var(--animate-curve);
        position: relative;
        group: hover;
    }

        .media-card:hover {
            transform: translateY(-4px) scale(1.02);
            box-shadow: var(--shadow-xl);
        }

    .media-preview {
        aspect-ratio: 4/3;
        overflow: hidden;
        position: relative;
        background: var(--primary-100);
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .media-preview img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform var(--animate-duration) var(--animate-curve);
        }

    .media-card:hover .media-preview img {
        transform: scale(1.1);
    }

    .media-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        transition: opacity var(--animate-duration) var(--animate-curve);
    }

    .media-card:hover .media-overlay {
        opacity: 1;
    }

    .media-icon {
        width: 32px;
        height: 32px;
        color: var(--primary-400);
    }

    .media-info {
        padding: 1rem;
    }

    .media-name {
        color: var(--primary-900);
        font-size: 0.875rem;
        font-weight: 500;
        margin: 0;
        line-height: 1.4;
        word-break: break-word;
    }

    .empty-state {
        text-align: center;
        padding: 4rem 2rem;
        color: var(--primary-500);
    }

    .empty-state-icon {
        width: 64px;
        height: 64px;
        margin: 0 auto 1rem;
        opacity: 0.5;
    }

    .empty-state-title {
        font-size: 1.125rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
        color: var(--primary-600);
    }

    .empty-state-description {
        font-size: 0.875rem;
        color: var(--primary-500);
    }

    /* Floating Action Buttons */
    .fab-container {
        position: fixed;
        bottom: 2rem;
        right: 2rem;
        display: flex;
        flex-direction: column;
        gap: 1rem;
        z-index: 1000;
    }

    .fab {
        width: 56px;
        height: 56px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        text-decoration: none;
        box-shadow: var(--shadow-xl);
        transition: all var(--animate-duration) var(--animate-curve);
        border: none;
        cursor: pointer;
    }

    .fab-primary {
        background: var(--gradient-brand);
    }

    .fab-secondary {
        background: var(--gradient-success);
    }

    .fab:hover {
        transform: scale(1.1) translateY(-2px);
        box-shadow: var(--shadow-2xl);
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .hero-main {
            grid-template-columns: 1fr;
            text-align: center;
            gap: 1.5rem;
        }

        .hero-content {
            padding: 2rem 1rem;
        }

        .hero-info h1 {
            font-size: 2rem;
        }

        .details-grid {
            grid-template-columns: 1fr;
            gap: 1.5rem;
        }

        .stats-grid {
            grid-template-columns: 1fr;
        }

        .main-content {
            padding: 0 1rem 3rem;
        }

        .media-grid {
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            padding: 1.5rem;
        }

        .fab-container {
            bottom: 1rem;
            right: 1rem;
        }
    }

    @@media (max-width: 480px) {
        .hero-badges, .hero-actions {
            justify-content: center;
        }

        .panel-content {
            padding: 1.5rem;
        }
    }

    /* Animation for page load */
    .fade-in {
        animation: fadeIn 0.6s ease-out;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .slide-up {
        animation: slideUp 0.8s ease-out;
    }

    @@keyframes slideUp {
        from {
            opacity: 0;
            transform: translateY(40px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>

<div class="driver-profile-page">
    <!-- Hero Section -->
    <section class="hero-section fade-in">
        <div class="hero-content">
            <nav class="breadcrumb-nav">
                <a asp-action="Index" asp-controller="Dashboard">Dashboard</a>
                <span class="breadcrumb-separator">›</span>
                <a asp-action="Index" asp-controller="Driver">Drivers</a>
                <span class="breadcrumb-separator">›</span>
                <span>@fullName</span>
            </nav>

            <div class="hero-main">
                

                <div class="hero-info">
                    <h1>@fullName</h1>
                    <p class="hero-subtitle">Professional Fleet Driver</p>
                    <div class="hero-badges">
                        <span class="hero-badge @(Model.IsActive ? "badge-active" : "badge-inactive")">
                            <span style="width: 8px; height: 8px; background: currentColor; border-radius: 50%; animation: pulse 2s infinite;"></span>
                            @(Model.IsActive ? "Active" : "Inactive")
                        </span>
                        @if (!string.IsNullOrEmpty(Model.EmploymentStatus.GetDisplayName()))
                        {
                            <span class="hero-badge badge-employment">
                                <i class="feather-briefcase" style="width: 16px; height: 16px;"></i>
                                @Model.EmploymentStatus.GetDisplayName()
                            </span>
                        }
                    </div>
                </div>

                <div class="hero-actions">
                    <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-primary">
                        <i class="feather-edit" style="width: 16px; height: 16px;"></i>
                        Edit Profile
                    </a>
                    <a asp-action="Index" class="btn btn-secondary">
                        <i class="feather-arrow-left" style="width: 16px; height: 16px;"></i>
                        Back to List
                    </a>
                </div>
            </div>
        </div>
    </section>

    <!-- Main Content -->
    <main class="main-content">
        <!-- Quick Stats -->
        <div class="stats-grid slide-up">
            <div class="stat-card">
                <div class="stat-header">
                    <span class="stat-label">Account Status</span>
                    <i class="feather-user stat-icon"></i>
                </div>
                <div class="stat-value">@(Model.IsActive ? "Active" : "Inactive")</div>
                <div class="stat-description">Current account status</div>
            </div>

            <div class="stat-card">
                <div class="stat-header">
                    <span class="stat-label">License Status</span>
                    <i class="feather-credit-card stat-icon"></i>
                </div>
                <div class="stat-value">
                    @if (licenseExpiry.HasValue)
                    {
                        @(isLicenseExpired ? "Expired" : isLicenseExpiring ? "Expiring Soon" : "Valid")
                    }
                    else
                    {
                        <span>Not Set</span>
                    }
                </div>
                <div class="stat-description">
                    @if (licenseExpiry.HasValue)
                    {
                        @(isLicenseExpired ? $"Expired {Math.Abs(licenseExpiry.Value)} days ago" :
                            isLicenseExpiring ? $"Expires in {licenseExpiry.Value} days" :
                            $"Valid for {licenseExpiry.Value} days")
                    }
                    else
                    {
                        <span>License expiry not provided</span>
                    }
                </div>
            </div>

            <div class="stat-card">
                <div class="stat-header">
                    <span class="stat-label">Documents</span>
                    <i class="feather-folder stat-icon"></i>
                </div>
                <div class="stat-value">@((Model.DriverDocuments?.Count ?? 0))</div>
                <div class="stat-description">Total uploaded files</div>
            </div>

            <div class="stat-card">
                <div class="stat-header">
                    <span class="stat-label">Join Date</span>
                    <i class="feather-calendar stat-icon"></i>
                </div>
                <div class="stat-value">@Model.CreatedDate.ToString("MMM yyyy")</div>
                <div class="stat-description">Member since @Model.CreatedDate.ToString("MMMM dd, yyyy")</div>
            </div>
        </div>

        <!-- Detailed Information -->
        <div class="details-grid slide-up">
            <!-- Personal Information Panel -->
            <div class="info-panel">
                <div class="panel-header">
                    <i class="feather-user panel-icon"></i>
                    <h3 class="panel-title">Personal Information</h3>
                </div>
                <div class="panel-content">
                    <div class="info-list">
                        <div class="info-item">
                            <span class="info-label">Full Name</span>
                            <span class="info-value">@fullName</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Date of Birth</span>
                            <span class="info-value @(Model.DateOfBirth == default ? "empty" : "")">
                                @(Model.DateOfBirth != default ? Model.DateOfBirth.ToString("MMMM dd, yyyy") : "Not specified")
                            </span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Gender</span>
                            <span class="info-value @(string.IsNullOrEmpty(Model.Gender.GetDisplayName()) ? "empty" : "")">
                                @(Model.Gender.GetDisplayName() ?? "Not specified")
                            </span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Address</span>
                            <span class="info-value @(string.IsNullOrEmpty(Model.Address) ? "empty" : "")">
                                @(Model.Address ?? "Not provided")
                            </span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Contact Information Panel -->
            <div class="info-panel">
                <div class="panel-header">
                    <i class="feather-phone panel-icon"></i>
                    <h3 class="panel-title">Contact Information</h3>
                </div>
                <div class="panel-content">
                    <div class="info-list">
                        <div class="info-item">
                            <span class="info-label">Email Address</span>
                            <span class="info-value @(string.IsNullOrEmpty(Model.Email) ? "empty" : "")">
                                @if (!string.IsNullOrEmpty(Model.Email))
                                {
                                    <a href="mailto:@Model.Email" style="color: var(--accent-blue); text-decoration: none;">@Model.Email</a>
                                }
                                else
                                {
                                    <span>Not provided</span>
                                }
                            </span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Phone Number</span>
                            <span class="info-value @(string.IsNullOrEmpty(Model.PhoneNumber) ? "empty" : "")">
                                @if (!string.IsNullOrEmpty(Model.PhoneNumber))
                                {
                                    <a href="tel:@Model.PhoneNumber" style="color: var(--accent-blue); text-decoration: none;">@Model.PhoneNumber</a>
                                }
                                else
                                {
                                    <span>Not provided</span>
                                }
                            </span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- License Information Panel -->
            <div class="info-panel">
                <div class="panel-header">
                    <i class="feather-credit-card panel-icon"></i>
                    <h3 class="panel-title">License Information</h3>
                </div>
                <div class="panel-content">
                    <div class="info-list">
                        <div class="info-item">
                            <span class="info-label">License Number</span>
                            <span class="info-value monospace @(string.IsNullOrEmpty(Model.LicenseNumber) ? "empty" : "")">
                                @(Model.LicenseNumber ?? "Not provided")
                            </span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">License Category</span>
                            <span class="info-value @(string.IsNullOrEmpty(Model.LicenseCategory.GetDisplayName()) ? "empty" : "")">
                                @(Model.LicenseCategory.GetDisplayName() ?? "Not specified")
                            </span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Expiry Date</span>
                            <div class="info-value">
                                @if (Model.LicenseExpiryDate.HasValue)
                                {
                                    var statusClass = isLicenseExpired ? "license-expired" : isLicenseExpiring ? "license-expiring" : "license-valid";
                                    var statusIcon = isLicenseExpired ? "alert-triangle" : isLicenseExpiring ? "alert-circle" : "check-circle";
                                    var statusText = isLicenseExpired ? $"Expired {Math.Abs(licenseExpiry.Value)} days ago" :
                                    isLicenseExpiring ? $"Expires in {licenseExpiry.Value} days" : "Valid";

                                    <div class="license-status @statusClass">
                                        <i class="feather-@statusIcon" style="width: 16px; height: 16px;"></i>
                                        <span>@Model.LicenseExpiryDate.Value.ToString("MMM dd, yyyy")</span>
                                    </div>
                                    <small style="color: var(--primary-600); margin-top: 0.5rem; display: block;">@statusText</small>
                                }
                                else
                                {
                                    <span class="empty">Not provided</span>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Employment Information Panel -->
            <div class="info-panel">
                <div class="panel-header">
                    <i class="feather-briefcase panel-icon"></i>
                    <h3 class="panel-title">Employment Details</h3>
                </div>
                <div class="panel-content">
                    <div class="info-list">
                        <div class="info-item">
                            <span class="info-label">Employment Status</span>
                            <span class="info-value @(string.IsNullOrEmpty(Model.EmploymentStatus.GetDisplayName()) ? "empty" : "")">
                                @(Model.EmploymentStatus.GetDisplayName() ?? "Not specified")
                            </span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Shift Status</span>
                            <span class="info-value @(string.IsNullOrEmpty(Model.ShiftStatus.GetDisplayName()) ? "empty" : "")">
                                @(Model.ShiftStatus.GetDisplayName() ?? "Not assigned")
                            </span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Join Date</span>
                            <span class="info-value">
                                @Model.CreatedDate.ToString("MMMM dd, yyyy")
                            </span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Years of Service</span>
                            <span class="info-value">
                                @{
                                    var yearsOfService = (DateTime.Now - Model.CreatedDate).Days / 365.25;
                                    var displayYears = yearsOfService < 1 ? "Less than 1 year" : $"{yearsOfService:F1} years";
                                }
                                @displayYears
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Profile Photos Section -->
        

        <!-- License Documents Section -->
        @if (Model.DriverDocuments?.Any() == true)
        {
            <div class="media-section slide-up">
                <div class="media-header">
                    <h3 class="media-title">
                        <i class="feather-file-text" style="width: 24px; height: 24px;"></i>
                        License Documents
                    </h3>
                    <span class="media-count">@Model.DriverDocuments.Count</span>
                </div>
                <div class="media-grid">
                    @foreach (var doc in Model.DriverDocuments)
                    {
                        <div class="media-card">
                            <div class="media-preview">
                                @if (doc.FileName.EndsWith(".jpg") || doc.FileName.EndsWith(".jpeg") ||
                                                        doc.FileName.EndsWith(".png") || doc.FileName.EndsWith(".gif"))
                                {
                                    <img src="@doc.FileName" alt="@doc.FileName" loading="lazy" />
                                    <div class="media-overlay">
                                        <i class="feather-eye" style="width: 24px; height: 24px; color: white;"></i>
                                    </div>
                                }
                                else
                                {
                                    <i class="feather-file-text media-icon"></i>
                                }
                            </div>
                            <div class="media-info">
                                <p class="media-name">@doc.FileName</p>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }

        <!-- Empty State for Documents -->
        @if ((Model.DriverDocuments?.Any() != true))
        {
            <div class="media-section slide-up">
                <div class="media-header">
                    <h3 class="media-title">
                        <i class="feather-folder" style="width: 24px; height: 24px;"></i>
                        Documents & Photos
                    </h3>
                    <span class="media-count">0</span>
                </div>
                <div class="empty-state">
                    <i class="feather-folder-plus empty-state-icon"></i>
                    <h4 class="empty-state-title">No Documents Found</h4>
                    <p class="empty-state-description">
                        No documents or photos have been uploaded for this driver yet.<br>
                        Use the edit button to add profile photos and license documents.
                    </p>
                </div>
            </div>
        }
    </main>

    <!-- Floating Action Buttons -->
    <div class="fab-container">
        <a asp-action="Edit" asp-route-id="@Model.Id" class="fab fab-primary" title="Edit Driver Profile">
            <i class="feather-edit" style="width: 24px; height: 24px;"></i>
        </a>
        <a href="#" onclick="window.history.back(); return false;" class="fab fab-secondary" title="Go Back">
            <i class="feather-arrow-left" style="width: 24px; height: 24px;"></i>
        </a>
    </div>
</div>

<!-- Feather Icons Script -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/feather-icons/4.29.0/feather.min.js"></script>
<script>
    // Initialize Feather Icons
    feather.replace();

    // Add smooth scrolling behavior
    document.documentElement.style.scrollBehavior = 'smooth';

    // Add intersection observer for animations
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.style.opacity = '1';
                entry.target.style.transform = 'translateY(0)';
            }
        });
    }, observerOptions);

    // Observe elements with slide-up class
    document.querySelectorAll('.slide-up').forEach(el => {
        el.style.opacity = '0';
        el.style.transform = 'translateY(20px)';
        el.style.transition = 'opacity 0.6s ease-out, transform 0.6s ease-out';
        observer.observe(el);
    });

    // Add hover effects for media cards
    document.querySelectorAll('.media-card').forEach(card => {
        card.addEventListener('mouseenter', () => {
            card.style.transform = 'translateY(-8px) scale(1.02)';
        });

        card.addEventListener('mouseleave', () => {
            card.style.transform = 'translateY(0) scale(1)';
        });
    });

    // Add parallax effect to hero section
    window.addEventListener('scroll', () => {
        const scrolled = window.pageYOffset;
        const heroSection = document.querySelector('.hero-section');
        if (heroSection) {
            heroSection.style.transform = `translateY(${scrolled * 0.5}px)`;
        }
    });

    // Add pulse animation to status dots
    const style = document.createElement('style');
    style.textContent = `
    @@keyframes pulse {
            0%, 100% { opacity: 1; transform: scale(1); }
            50% { opacity: 0.5; transform: scale(1.2); }
        }
    `;
    document.head.appendChild(style);

    // Add click handlers for media cards (optional lightbox functionality)
    document.querySelectorAll('.media-card img').forEach(img => {
        img.addEventListener('click', (e) => {
            e.preventDefault();
            // Here you could implement a lightbox/modal functionality
            console.log('Image clicked:', img.src);
        });
    });

    // Smooth page load animation
    window.addEventListener('load', () => {
        document.body.style.opacity = '1';
        document.body.style.transform = 'translateY(0)';
    });

    // Set initial state for smooth load
    document.body.style.opacity = '0';
    document.body.style.transform = 'translateY(20px)';
    document.body.style.transition = 'opacity 0.8s ease-out, transform 0.8s ease-out';
</script>


















