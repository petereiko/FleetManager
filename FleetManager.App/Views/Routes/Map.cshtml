@* @using FleetManager.Business.ViewModels.GoogleViewModels
@model MapViewModel
@{
    ViewData["Title"] = "Route Map";
}

<div class="container-fluid p-0">
    <div class="row g-0">
        <div class="col-12">
            <!-- Header Bar -->
            <div class="bg-dark text-white p-3 shadow-sm">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="d-flex align-items-center">
                        <a asp-action="Index" class="btn btn-outline-light me-3">
                            <i class="fas fa-arrow-left me-2"></i>Back to Route Planner
                        </a>
                        <h1 class="mb-0 h4">
                            <i class="fas fa-map-marked-alt me-2"></i>
                            Interactive Route Map
                        </h1>
                    </div>
                    <div class="d-flex align-items-center">
                        <div class="btn-group me-3" role="group">
                            <button type="button" class="btn btn-outline-light" onclick="toggleTraffic()">
                                <i class="fas fa-traffic-light me-1"></i>Traffic
                            </button>
                            <button type="button" class="btn btn-outline-light" onclick="toggleSatellite()">
                                <i class="fas fa-satellite me-1"></i>Satellite
                            </button>
                            <button type="button" class="btn btn-outline-light" onclick="fitToRoute()">
                                <i class="fas fa-expand-arrows-alt me-1"></i>Fit Route
                            </button>
                        </div>
                        <button type="button" class="btn btn-outline-light" onclick="shareRoute()">
                            <i class="fas fa-share-alt me-1"></i>Share
                        </button>
                    </div>
                </div>
            </div>

            <!-- Map Container -->
            <div class="position-relative">
                <div id="map" style="height: calc(100vh - 80px); width: 100%;"></div>

                <!-- Map Controls Overlay -->
                <div class="position-absolute top-0 start-0 m-3">
                    <div class="card shadow-lg border-0" style="max-width: 300px;">
                        <div class="card-body p-3">
                            <h6 class="card-title mb-2">
                                <i class="fas fa-info-circle text-primary me-2"></i>
                                Route Information
                            </h6>
                            <div id="routeInfo" class="small text-muted">
                                Loading route details...
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Loading Overlay -->
                <div id="mapLoading" class="position-absolute top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center bg-light bg-opacity-75">
                    <div class="text-center">
                        <div class="spinner-border text-primary mb-3" style="width: 3rem; height: 3rem;" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="text-muted mb-0">Loading interactive map...</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    /* Custom map styles */
    .gm-style-iw {
        border-radius: 8px !important;
    }

    .gm-style-iw-d {
        overflow: hidden !important;
    }

    /* Floating card styles */
    .position-absolute .card {
        backdrop-filter: blur(10px);
        background-color: rgba(255, 255, 255, 0.95);
        border-radius: 12px;
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .d-flex.justify-content-between

    {
        flex-direction: column;
        gap: 1rem;
    }

    .position-absolute.top-0.start-0 {
        position: relative !important;
        margin: 0 !important;
    }

    .position-absolute .card {
        margin: 1rem;
        max-width: none;
    }

    }

    /* Button hover effects */
    .btn-outline-light:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(255, 255, 255, 0.3);
    }

    /* Traffic layer toggle */
    .traffic-enabled {
        background-color: #28a745 !important;
        border-color: #28a745 !important;
    }

    .satellite-enabled {
        background-color: #17a2b8 !important;
        border-color: #17a2b8 !important;
    }
</style>

<script src="https://maps.googleapis.com/maps/api/js?key=@Model.ApiKey&libraries=geometry"></script>

<script>
    let map;
    let routeLine;
    let trafficLayer;
    let isTrafficVisible = false;
    let isSatelliteView = false;
    let routeBounds;

    function initMap() {
        try {
            // Decode the polyline into an array of LatLng
            const decodedPath = google.maps.geometry.encoding.decodePath('@Model.EncodedPolyline');

            if (decodedPath.length === 0) {
                showError('Invalid route data');
                return;
            }

            // Create bounds to fit the entire route
            routeBounds = new google.maps.LatLngBounds();
            decodedPath.forEach(point => routeBounds.extend(point));

            // Initialize map with modern styling
            map = new google.maps.Map(document.getElementById('map'), {
                center: routeBounds.getCenter(),
                zoom: 12,
                mapTypeControl: false,
                streetViewControl: true,
                fullscreenControl: true,
                zoomControl: true,
                gestureHandling: 'greedy',
                styles: [
                    {
                        featureType: 'poi',
                        elementType: 'labels',
                        stylers: [{ visibility: 'on' }]
                    },
                    {
                        featureType: 'transit',
                        elementType: 'labels',
                        stylers: [{ visibility: 'on' }]
                    }
                ]
            });

            // Create the route polyline with enhanced styling
            routeLine = new google.maps.Polyline({
                path: decodedPath,
                geodesic: true,
                strokeColor: '#4285F4',
                strokeOpacity: 0.8,
                strokeWeight: 6,
                map: map,
                icons: [{
                    icon: {
                        path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW,
                        scale: 3,
                        strokeColor: '#4285F4',
                        strokeWeight: 2,
                        fillColor: '#4285F4',
                        fillOpacity: 1
                    },
                    offset: '100%',
                    repeat: '200px'
                }]
            });

            // Add start and end markers
            const startMarker = new google.maps.Marker({
                position: decodedPath[0],
                map: map,
                title: 'Start',
                icon: {
                    url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`
                        <svg width="40" height="40" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg">
                            <circle cx="20" cy="20" r="18" fill="#34A853" stroke="white" stroke-width="4"/>
                            <text x="20" y="26" text-anchor="middle" fill="white" font-family="Arial, sans-serif" font-size="16" font-weight="bold">A</text>
                        </svg>
                    `),
                    scaledSize: new google.maps.Size(40, 40),
                    anchor: new google.maps.Point(20, 20)
                }
            });

            const endMarker = new google.maps.Marker({
                position: decodedPath[decodedPath.length - 1],
                map: map,
                title: 'Destination',
                icon: {
                    url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`
                        <svg width="40" height="40" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg">
                            <circle cx="20" cy="20" r="18" fill="#EA4335" stroke="white" stroke-width="4"/>
                            <text x="20" y="26" text-anchor="middle" fill="white" font-family="Arial, sans-serif" font-size="16" font-weight="bold">B</text>
                        </svg>
                    `),
                    scaledSize: new google.maps.Size(40, 40),
                    anchor: new google.maps.Point(20, 20)
                }
            });

            // Initialize traffic layer
            trafficLayer = new google.maps.TrafficLayer();

            // Fit map to route bounds
            map.fitBounds(routeBounds);

            // Update route info
            updateRouteInfo(decodedPath);

            // Hide loading overlay
            document.getElementById('mapLoading').style.display = 'none';

        } catch (error) {
            console.error('Map initialization error:', error);
            showError('Failed to load map. Please try again.');
        }
    }

    function updateRouteInfo(path) {
        const distance = google.maps.geometry.spherical.computeLength(path);
        const distanceKm = (distance / 1000).toFixed(1);

        document.getElementById('routeInfo').innerHTML = `
            <div class="mb-2">
                <i class="fas fa-route text-primary me-2"></i>
                <strong>Distance:</strong> ${distanceKm} km
            </div>
            <div class="mb-2">
                <i class="fas fa-map-pin text-success me-2"></i>
                <strong>Waypoints:</strong> ${path.length} points
            </div>
            <div>
                <i class="fas fa-compass text-info me-2"></i>
                <strong>Bearing:</strong> ${getBearing(path[0], path[path.length - 1])}°
            </div>
        `;
    }

    function getBearing(start, end) {
        const lat1 = start.lat() * Math.PI / 180;
        const lat2 = end.lat() * Math.PI / 180;
        const deltaLng = (end.lng() - start.lng()) * Math.PI / 180;

        const y = Math.sin(deltaLng) * Math.cos(lat2);
        const x = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(deltaLng);

        const bearing = Math.atan2(y, x) * 180 / Math.PI;
        return Math.round((bearing + 360) % 360);
    }

    function toggleTraffic() {
        const btn = event.target.closest('button');
        if (isTrafficVisible) {
            trafficLayer.setMap(null);
            btn.classList.remove('traffic-enabled');
            isTrafficVisible = false;
        } else {
            trafficLayer.setMap(map);
            btn.classList.add('traffic-enabled');
            isTrafficVisible = true;
        }
    }

    function toggleSatellite() {
        const btn = event.target.closest('button');
        if (isSatelliteView) {
            map.setMapTypeId(google.maps.MapTypeId.ROADMAP);
            btn.classList.remove('satellite-enabled');
            isSatelliteView = false;
        } else {
            map.setMapTypeId(google.maps.MapTypeId.HYBRID);
            btn.classList.add('satellite-enabled');
            isSatelliteView = true;
        }
    }

    function fitToRoute() {
        if (routeBounds) {
            map.fitBounds(routeBounds);
        }
    }

    function shareRoute() {
        if (navigator.share) {
            navigator.share({
                title: 'Route Map',
                text: 'Check out this route!',
                url: window.location.href
            }).catch(err => console.log('Error sharing:', err));
        } else {
            // Fallback: copy URL to clipboard
            navigator.clipboard.writeText(window.location.href).then(() => {
                alert('Route URL copied to clipboard!');
            }).catch(() => {
                alert('Unable to share. URL: ' + window.location.href);
            });
        }
    }

    function showError(message) {
        document.getElementById('mapLoading').innerHTML = `
            <div class="text-center">
                <i class="fas fa-exclamation-triangle text-warning mb-3" style="font-size: 3rem;"></i>
                <p class="text-danger mb-3">${message}</p>
                <button class="btn btn-primary" onclick="location.reload()">
                    <i class="fas fa-redo me-2"></i>Retry
                </button>
            </div>
        `;
    }

    // Initialize map when the page loads
    google.maps.event.addDomListener(window, 'load', initMap);

    // Handle window resize
    window.addEventListener('resize', () => {
        if (map && routeBounds) {
            google.maps.event.trigger(map, 'resize');
            map.fitBounds(routeBounds);
        }
    });
</script> *@










@using FleetManager.Business.ViewModels.GoogleViewModels
@model MapViewModel
@{
    ViewData["Title"] = "Route Map";
}

<div class="container-fluid p-0">
    <div class="row g-0">
        <div class="col-12">
            <!-- Header Bar -->
            <div class="bg-dark text-white p-3 shadow-sm">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="d-flex align-items-center">
                        <a asp-action="Index" class="btn btn-outline-light me-3">
                            <i class="fas fa-arrow-left me-2"></i>Back to Route Planner
                        </a>
                        <h1 class="mb-0 h4">
                            <i class="fas fa-map-marked-alt me-2"></i>
                            Interactive Route Map
                        </h1>
                    </div>
                    <div class="d-flex align-items-center">
                        <div class="btn-group me-3" role="group">
                            <button type="button" class="btn btn-outline-light" onclick="toggleTraffic()">
                                <i class="fas fa-traffic-light me-1"></i>Traffic
                            </button>
                            <button type="button" class="btn btn-outline-light" onclick="toggleSatellite()">
                                <i class="fas fa-satellite me-1"></i>Satellite
                            </button>
                            <button type="button" class="btn btn-outline-light" onclick="toggleStreetView()">
                                <i class="fas fa-street-view me-1"></i>Street View
                            </button>
                            <button type="button" class="btn btn-outline-light" onclick="fitToRoute()">
                                <i class="fas fa-expand-arrows-alt me-1"></i>Fit Route
                            </button>
                        </div>
                        <button type="button" class="btn btn-outline-light" onclick="shareRoute()">
                            <i class="fas fa-share-alt me-1"></i>Share
                        </button>
                    </div>
                </div>
            </div>

            <!-- Map Container -->
            <div class="position-relative">
                <div id="map" style="height: calc(100vh - 80px); width: 100%;"></div>

                <!-- Street View Container -->
                <div id="streetViewContainer" class="position-absolute top-0 end-0 bg-white border-start shadow-lg"
                     style="width: 40%; height: 100%; display: none; z-index: 1000;">
                    <div class="d-flex justify-content-between align-items-center p-2 bg-dark text-white">
                        <h6 class="mb-0">
                            <i class="fas fa-street-view me-2"></i>Street View
                        </h6>
                        <button type="button" class="btn btn-outline-light btn-sm" onclick="closeStreetView()">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div id="streetView" style="height: calc(100% - 50px);"></div>
                </div>

                <!-- Map Controls Overlay -->
                <div class="position-absolute top-0 start-0 m-3">
                    <div class="card shadow-lg border-0" style="max-width: 300px;">
                        <div class="card-body p-3">
                            <h6 class="card-title mb-2">
                                <i class="fas fa-info-circle text-primary me-2"></i>
                                Route Information
                            </h6>
                            <div id="routeInfo" class="small text-muted">
                                Loading route details...
                            </div>
                            <div id="streetViewInstructions" class="small text-info mt-2" style="display: none;">
                                <i class="fas fa-mouse-pointer me-1"></i>
                                Click on the route to view street view
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Loading Overlay -->
                <div id="mapLoading" class="position-absolute top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center bg-light bg-opacity-75">
                    <div class="text-center">
                        <div class="spinner-border text-primary mb-3" style="width: 3rem; height: 3rem;" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="text-muted mb-0">Loading interactive map...</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    /* Custom map styles */
    .gm-style-iw {
        border-radius: 8px !important;
    }

    .gm-style-iw-d {
        overflow: hidden !important;
    }

    /* Floating card styles */
    .position-absolute .card {
        backdrop-filter: blur(10px);
        background-color: rgba(255, 255, 255, 0.95);
        border-radius: 12px;
    }

    /* Street View Container Styles */
    #streetViewContainer {
        transition: transform 0.3s ease-in-out;
        transform: translateX(100%);
    }

        #streetViewContainer.show {
            transform: translateX(0);
            display: block !important;
        }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .d-flex.justify-content-between

    {
        flex-direction: column;
        gap: 1rem;
    }

    .position-absolute.top-0.start-0 {
        position: relative !important;
        margin: 0 !important;
    }

    .position-absolute .card {
        margin: 1rem;
        max-width: none;
    }

    #streetViewContainer {
        width: 100% !important;
        height: 50% !important;
        top: 50% !important;
    }

    }

    /* Button hover effects */
    .btn-outline-light:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(255, 255, 255, 0.3);
    }

    /* Traffic layer toggle */
    .traffic-enabled {
        background-color: #28a745 !important;
        border-color: #28a745 !important;
    }

    .satellite-enabled {
        background-color: #17a2b8 !important;
        border-color: #17a2b8 !important;
    }

    .streetview-enabled {
        background-color: #fd7e14 !important;
        border-color: #fd7e14 !important;
    }
</style>

<script src="https://maps.googleapis.com/maps/api/js?key=@Model.ApiKey&libraries=geometry"></script>

<script>
    let map;
    let routeLine;
    let trafficLayer;
    let streetViewPanorama;
    let streetViewService;
    let isTrafficVisible = false;
    let isSatelliteView = false;
    let isStreetViewVisible = false;
    let routeBounds;

    function initMap() {
        try {
            // Decode the polyline into an array of LatLng
            const decodedPath = google.maps.geometry.encoding.decodePath('@Model.EncodedPolyline');

            if (decodedPath.length === 0) {
                showError('Invalid route data');
                return;
            }

            // Create bounds to fit the entire route
            routeBounds = new google.maps.LatLngBounds();
            decodedPath.forEach(point => routeBounds.extend(point));

            // Initialize map with modern styling
            map = new google.maps.Map(document.getElementById('map'), {
                center: routeBounds.getCenter(),
                zoom: 12,
                mapTypeControl: false,
                streetViewControl: true,
                fullscreenControl: true,
                zoomControl: true,
                gestureHandling: 'greedy',
                styles: [
                    {
                        featureType: 'poi',
                        elementType: 'labels',
                        stylers: [{ visibility: 'on' }]
                    },
                    {
                        featureType: 'transit',
                        elementType: 'labels',
                        stylers: [{ visibility: 'on' }]
                    }
                ]
            });

            // Initialize Street View Service
            streetViewService = new google.maps.StreetViewService();

            // Create the route polyline with enhanced styling
            routeLine = new google.maps.Polyline({
                path: decodedPath,
                geodesic: true,
                strokeColor: '#4285F4',
                strokeOpacity: 0.8,
                strokeWeight: 6,
                map: map,
                icons: [{
                    icon: {
                        path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW,
                        scale: 3,
                        strokeColor: '#4285F4',
                        strokeWeight: 2,
                        fillColor: '#4285F4',
                        fillOpacity: 1
                    },
                    offset: '100%',
                    repeat: '200px'
                }]
            });

            // Add click listener to route line for street view
            routeLine.addListener('click', function(event) {
                if (isStreetViewVisible) {
                    showStreetViewAtLocation(event.latLng);
                }
            });

            // Add start and end markers
            const startMarker = new google.maps.Marker({
                position: decodedPath[0],
                map: map,
                title: 'Start',
                icon: {
                    url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`
                        <svg width="40" height="40" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg">
                            <circle cx="20" cy="20" r="18" fill="#34A853" stroke="white" stroke-width="4"/>
                            <text x="20" y="26" text-anchor="middle" fill="white" font-family="Arial, sans-serif" font-size="16" font-weight="bold">A</text>
                        </svg>
                    `),
                    scaledSize: new google.maps.Size(40, 40),
                    anchor: new google.maps.Point(20, 20)
                }
            });

            const endMarker = new google.maps.Marker({
                position: decodedPath[decodedPath.length - 1],
                map: map,
                title: 'Destination',
                icon: {
                    url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`
                        <svg width="40" height="40" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg">
                            <circle cx="20" cy="20" r="18" fill="#EA4335" stroke="white" stroke-width="4"/>
                            <text x="20" y="26" text-anchor="middle" fill="white" font-family="Arial, sans-serif" font-size="16" font-weight="bold">B</text>
                        </svg>
                    `),
                    scaledSize: new google.maps.Size(40, 40),
                    anchor: new google.maps.Point(20, 20)
                }
            });

            // Add click listeners to markers for street view
            startMarker.addListener('click', function() {
                if (isStreetViewVisible) {
                    showStreetViewAtLocation(startMarker.getPosition());
                }
            });

            endMarker.addListener('click', function() {
                if (isStreetViewVisible) {
                    showStreetViewAtLocation(endMarker.getPosition());
                }
            });

            // Initialize traffic layer
            trafficLayer = new google.maps.TrafficLayer();

            // Fit map to route bounds
            map.fitBounds(routeBounds);

            // Update route info
            updateRouteInfo(decodedPath);

            // Hide loading overlay
            document.getElementById('mapLoading').style.display = 'none';

        } catch (error) {
            console.error('Map initialization error:', error);
            showError('Failed to load map. Please try again.');
        }
    }

    function updateRouteInfo(path) {
        const distance = google.maps.geometry.spherical.computeLength(path);
        const distanceKm = (distance / 1000).toFixed(1);

        document.getElementById('routeInfo').innerHTML = `
            <div class="mb-2">
                <i class="fas fa-route text-primary me-2"></i>
                <strong>Distance:</strong> ${distanceKm} km
            </div>
            <div class="mb-2">
                <i class="fas fa-map-pin text-success me-2"></i>
                <strong>Waypoints:</strong> ${path.length} points
            </div>
            <div>
                <i class="fas fa-compass text-info me-2"></i>
                <strong>Bearing:</strong> ${getBearing(path[0], path[path.length - 1])}°
            </div>
        `;
    }

    function getBearing(start, end) {
        const lat1 = start.lat() * Math.PI / 180;
        const lat2 = end.lat() * Math.PI / 180;
        const deltaLng = (end.lng() - start.lng()) * Math.PI / 180;

        const y = Math.sin(deltaLng) * Math.cos(lat2);
        const x = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(deltaLng);

        const bearing = Math.atan2(y, x) * 180 / Math.PI;
        return Math.round((bearing + 360) % 360);
    }

    function toggleTraffic() {
        const btn = event.target.closest('button');
        if (isTrafficVisible) {
            trafficLayer.setMap(null);
            btn.classList.remove('traffic-enabled');
            isTrafficVisible = false;
        } else {
            trafficLayer.setMap(map);
            btn.classList.add('traffic-enabled');
            isTrafficVisible = true;
        }
    }

    function toggleSatellite() {
        const btn = event.target.closest('button');
        if (isSatelliteView) {
            map.setMapTypeId(google.maps.MapTypeId.ROADMAP);
            btn.classList.remove('satellite-enabled');
            isSatelliteView = false;
        } else {
            map.setMapTypeId(google.maps.MapTypeId.HYBRID);
            btn.classList.add('satellite-enabled');
            isSatelliteView = true;
        }
    }

    function toggleStreetView() {
        const btn = event.target.closest('button');
        const container = document.getElementById('streetViewContainer');
        const instructions = document.getElementById('streetViewInstructions');

        if (isStreetViewVisible) {
            // Hide street view
            container.classList.remove('show');
            setTimeout(() => {
                container.style.display = 'none';
            }, 300);
            btn.classList.remove('streetview-enabled');
            instructions.style.display = 'none';
            isStreetViewVisible = false;
        } else {
            // Show street view
            container.style.display = 'block';
            setTimeout(() => {
                container.classList.add('show');
            }, 10);
            btn.classList.add('streetview-enabled');
            instructions.style.display = 'block';
            isStreetViewVisible = true;

            // Initialize street view if not already done
            if (!streetViewPanorama) {
                streetViewPanorama = new google.maps.StreetViewPanorama(
                    document.getElementById('streetView'),
                    {
                        position: routeBounds.getCenter(),
                        pov: { heading: 0, pitch: 0 },
                        zoom: 1,
                        addressControl: false,
                        linksControl: true,
                        panControl: true,
                        enableCloseButton: false
                    }
                );
            }
        }
    }

    function closeStreetView() {
        const container = document.getElementById('streetViewContainer');
        const btn = document.querySelector('[onclick="toggleStreetView()"]');
        const instructions = document.getElementById('streetViewInstructions');

        container.classList.remove('show');
        setTimeout(() => {
            container.style.display = 'none';
        }, 300);
        btn.classList.remove('streetview-enabled');
        instructions.style.display = 'none';
        isStreetViewVisible = false;
    }

    function showStreetViewAtLocation(latLng) {
        streetViewService.getPanorama({
            location: latLng,
            radius: 50
        }, function(data, status) {
            if (status === 'OK') {
                streetViewPanorama.setPano(data.location.pano);
                streetViewPanorama.setPov({
                    heading: 270,
                    pitch: 0
                });
                streetViewPanorama.setVisible(true);
            } else {
                alert('Street View data not found for this location.');
            }
        });
    }

    function fitToRoute() {
        if (routeBounds) {
            map.fitBounds(routeBounds);
        }
    }

    function shareRoute() {
        if (navigator.share) {
            navigator.share({
                title: 'Route Map',
                text: 'Check out this route!',
                url: window.location.href
            }).catch(err => console.log('Error sharing:', err));
        } else {
            // Fallback: copy URL to clipboard
            navigator.clipboard.writeText(window.location.href).then(() => {
                alert('Route URL copied to clipboard!');
            }).catch(() => {
                alert('Unable to share. URL: ' + window.location.href);
            });
        }
    }

    function showError(message) {
        document.getElementById('mapLoading').innerHTML = `
            <div class="text-center">
                <i class="fas fa-exclamation-triangle text-warning mb-3" style="font-size: 3rem;"></i>
                <p class="text-danger mb-3">${message}</p>
                <button class="btn btn-primary" onclick="location.reload()">
                    <i class="fas fa-redo me-2"></i>Retry
                </button>
            </div>
        `;
    }

    // Initialize map when the page loads
    google.maps.event.addDomListener(window, 'load', initMap);

    // Handle window resize
    window.addEventListener('resize', () => {
        if (map && routeBounds) {
            google.maps.event.trigger(map, 'resize');
            map.fitBounds(routeBounds);
        }
        if (streetViewPanorama) {
            google.maps.event.trigger(streetViewPanorama, 'resize');
        }
    });
</script>