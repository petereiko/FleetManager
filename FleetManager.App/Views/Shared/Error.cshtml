@model ErrorViewModel


@* @{
    ViewData["Title"] = "Something went wrong";
    //Layout = "_Layout"; // Remove this line if you want a standalone error page
} *@


@{
    int statusCode;
    if (!int.TryParse(Model.RequestId, out statusCode))
    {
        statusCode = 500;
    }
    ViewData["Title"] = $"Error {statusCode}";
    Layout = "_Layout"; // Remove this line if you want a standalone error page
    
    // Define status code specific messages
    string title, message, icon, actionText = "Go Home", actionUrl = "/";
    bool showRetry = false, showLogin = false, showBack = true;
    string bgGradient = "linear-gradient(135deg, #667eea 0%, #764ba2 100%)";
    string iconGradient = "linear-gradient(135deg, #667eea, #764ba2)";
    string cardBg = "rgba(255, 255, 255, 0.95)";
    
    switch (statusCode)
    {
        case 400:
            title = "Bad Request";
            message = "The request could not be understood by the server. Please check your input and try again.";
            icon = "alert-triangle";
            bgGradient = "linear-gradient(135deg, #ff6b6b 0%, #ee5a52 100%)";
            iconGradient = "linear-gradient(135deg, #ff6b6b, #ee5a52)";
            break;
        case 401:
            title = "Session Expired";
            message = "Your session has expired for security reasons. Please log in again to continue.";
            icon = "lock";
            bgGradient = "linear-gradient(135deg, #4ecdc4 0%, #44a08d 100%)";
            iconGradient = "linear-gradient(135deg, #4ecdc4, #44a08d)";
            showLogin = true;
            showBack = false;
            actionText = "Sign In";
            actionUrl = "/login";
            break;
        case 403:
            title = "Access Denied";
            message = "You don't have permission to access this resource. Please contact your administrator if you believe this is an error.";
            icon = "shield-x";
            bgGradient = "linear-gradient(135deg, #fd79a8 0%, #e84393 100%)";
            iconGradient = "linear-gradient(135deg, #fd79a8, #e84393)";
            break;
        case 404:
            title = "Page Not Found";
            message = "The page you're looking for doesn't exist. It might have been moved, deleted, or you entered the wrong URL.";
            icon = "search";
            bgGradient = "linear-gradient(135deg, #a29bfe 0%, #6c5ce7 100%)";
            iconGradient = "linear-gradient(135deg, #a29bfe, #6c5ce7)";
            break;
        case 405:
            title = "Method Not Allowed";
            message = "The requested method is not supported for this resource. Please contact support if this persists.";
            icon = "x-circle";
            bgGradient = "linear-gradient(135deg, #fd79a8 0%, #fdcb6e 100%)";
            iconGradient = "linear-gradient(135deg, #fd79a8, #fdcb6e)";
            break;
        case 408:
            title = "Request Timeout";
            message = "The server timed out waiting for the request. Please try again or check your connection.";
            icon = "clock";
            bgGradient = "linear-gradient(135deg, #74b9ff 0%, #0984e3 100%)";
            iconGradient = "linear-gradient(135deg, #74b9ff, #0984e3)";
            showRetry = true;
            break;
        case 429:
            title = "Too Many Requests";
            message = "You've made too many requests in a short time. Please wait a moment and try again.";
            icon = "zap";
            bgGradient = "linear-gradient(135deg, #fdcb6e 0%, #e17055 100%)";
            iconGradient = "linear-gradient(135deg, #fdcb6e, #e17055)";
            showRetry = true;
            break;
        case 500:
            title = "Internal Server Error";
            message = "We encountered an unexpected error. Our technical team has been notified and is investigating.";
            icon = "alert-circle";
            bgGradient = "linear-gradient(135deg, #fd79a8 0%, #ee5a52 100%)";
            iconGradient = "linear-gradient(135deg, #fd79a8, #ee5a52)";
            break;
        case 502:
            title = "Bad Gateway";
            message = "We're experiencing technical difficulties. Our team has been notified and is working on a fix.";
            icon = "server";
            bgGradient = "linear-gradient(135deg, #667eea 0%, #764ba2 100%)";
            iconGradient = "linear-gradient(135deg, #667eea, #764ba2)";
            showRetry = true;
            break;
        case 503:
            title = "Service Unavailable";
            message = "Our service is temporarily unavailable for maintenance. We'll be back online shortly.";
            icon = "tool";
            bgGradient = "linear-gradient(135deg, #a8edea 0%, #fed6e3 100%)";
            iconGradient = "linear-gradient(135deg, #81ecec, #74b9ff)";
            showRetry = true;
            break;
        default:
            title = "Something Went Wrong";
            message = "We encountered an unexpected error. Our technical team has been notified and is investigating.";
            icon = "alert-circle";
            break;
    }
}

<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }
    
    body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
        overflow-x: hidden;
    }
    
    .error-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 2rem;
        background: @bgGradient;
        position: relative;
        overflow: hidden;
    }
    
    .error-container::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.05'%3E%3Ccircle cx='30' cy='30' r='2'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
        animation: float 20s infinite linear;
    }
    
    @@keyframes float {
        0% { transform: translateY(0px) rotate(0deg); }
        100% { transform: translateY(-100px) rotate(360deg); }
    }
    
    .error-card {
        background: @cardBg;
        backdrop-filter: blur(20px);
        border-radius: 24px;
        box-shadow: 
            0 32px 64px rgba(0,0,0,0.12),
            0 0 0 1px rgba(255,255,255,0.1),
            inset 0 1px 0 rgba(255,255,255,0.2);
        padding: 3rem;
        text-align: center;
        max-width: 520px;
        width: 100%;
        position: relative;
        overflow: hidden;
        z-index: 10;
        animation: slideUp 0.6s ease-out;
    }
    
    @@keyframes slideUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    .error-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: @iconGradient;
        border-radius: 24px 24px 0 0;
    }
    
    .error-icon {
        width: 100px;
        height: 100px;
        margin: 0 auto 2rem;
        background: @iconGradient;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        animation: pulse 2s infinite;
        box-shadow: 0 8px 32px rgba(0,0,0,0.12);
        position: relative;
    }
    
    .error-icon::after {
        content: '';
        position: absolute;
        inset: -4px;
        border-radius: 50%;
        background: @iconGradient;
        opacity: 0.2;
        animation: ripple 2s infinite;
    }
    
    .error-icon svg {
        width: 48px;
        height: 48px;
        color: white;
        z-index: 1;
        filter: drop-shadow(0 2px 4px rgba(0,0,0,0.1));
    }
    
    @@keyframes pulse {
        0%, 100% { transform: scale(1); }
        50% { transform: scale(1.05); }
    }
    
    @@keyframes ripple {
        0% { transform: scale(1); opacity: 0.2; }
        100% { transform: scale(1.3); opacity: 0; }
    }
    
    .error-title {
        font-size: 2.25rem;
        font-weight: 700;
        color: #1a202c;
        margin-bottom: 1rem;
        line-height: 1.1;
        letter-spacing: -0.02em;
    }
    
    .error-message {
        font-size: 1.125rem;
        color: #4a5568;
        margin-bottom: 2.5rem;
        line-height: 1.6;
        font-weight: 400;
    }
    
    .error-actions {
        display: flex;
        gap: 1rem;
        justify-content: center;
        flex-wrap: wrap;
        margin-bottom: 2rem;
    }
    
    .btn {
        padding: 0.875rem 2rem;
        border-radius: 12px;
        text-decoration: none;
        font-weight: 600;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        border: none;
        cursor: pointer;
        font-size: 1rem;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        position: relative;
        overflow: hidden;
        min-width: 140px;
        justify-content: center;
    }
    
    .btn::before {
        content: '';
        position: absolute;
        inset: 0;
        background: linear-gradient(45deg, transparent 30%, rgba(255,255,255,0.1) 50%, transparent 70%);
        transform: translateX(-100%);
        transition: transform 0.6s;
    }
    
    .btn:hover::before {
        transform: translateX(100%);
    }
    
    .btn-primary {
        background: @iconGradient;
        color: white;
        box-shadow: 0 4px 14px rgba(0,0,0,0.15);
    }
    
    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.2);
        color: white;
        text-decoration: none;
    }
    
    .btn-secondary {
        background: rgba(74, 85, 104, 0.1);
        color: #4a5568;
        border: 2px solid rgba(74, 85, 104, 0.2);
        backdrop-filter: blur(10px);
    }
    
    .btn-secondary:hover {
        background: rgba(74, 85, 104, 0.15);
        border-color: rgba(74, 85, 104, 0.3);
        color: #4a5568;
        text-decoration: none;
        transform: translateY(-1px);
    }
    
    .btn-refresh {
        background: linear-gradient(135deg, #10b981, #059669);
        color: white;
        box-shadow: 0 4px 14px rgba(16, 185, 129, 0.3);
    }
    
    .btn-refresh:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(16, 185, 129, 0.4);
        color: white;
        text-decoration: none;
    }
    
    .error-code {
        position: absolute;
        top: 1.5rem;
        right: 1.5rem;
        background: rgba(255, 255, 255, 0.9);
        color: #6b7280;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-size: 0.875rem;
        font-weight: 600;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.2);
    }
    
    .help-text {
        margin-top: 2rem;
        padding-top: 2rem;
        border-top: 1px solid rgba(226, 232, 240, 0.6);
        font-size: 0.9rem;
        color: #6b7280;
        line-height: 1.5;
    }
    
    .help-text a {
        color: #667eea;
        text-decoration: none;
        font-weight: 500;
        transition: color 0.2s;
    }
    
    .help-text a:hover {
        color: #5a67d8;
        text-decoration: underline;
    }
    
    .retry-timer {
        margin-top: 1.5rem;
        padding: 1.25rem;
        background: linear-gradient(135deg, #ecfdf5, #f0fdf4);
        border: 1px solid #bbf7d0;
        border-radius: 12px;
        font-size: 0.9rem;
        color: #166534;
        display: none;
        font-weight: 500;
    }
    
    /* Custom Modal Styles */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.6);
        backdrop-filter: blur(8px);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        opacity: 0;
        visibility: hidden;
        transition: all 0.3s ease;
    }
    
    .modal-overlay.show {
        opacity: 1;
        visibility: visible;
    }
    
    .modal-content {
        background: white;
        border-radius: 20px;
        padding: 2rem;
        max-width: 400px;
        width: 90%;
        text-align: center;
        box-shadow: 0 20px 40px rgba(0,0,0,0.15);
        transform: scale(0.9);
        transition: transform 0.3s ease;
    }
    
    .modal-overlay.show .modal-content {
        transform: scale(1);
    }
    
    .modal-icon {
        width: 64px;
        height: 64px;
        margin: 0 auto 1.5rem;
        background: linear-gradient(135deg, #10b981, #059669);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .modal-icon svg {
        width: 32px;
        height: 32px;
        color: white;
    }
    
    .modal-title {
        font-size: 1.5rem;
        font-weight: 600;
        color: #1f2937;
        margin-bottom: 0.5rem;
    }
    
    .modal-message {
        font-size: 1rem;
        color: #6b7280;
        margin-bottom: 2rem;
        line-height: 1.5;
    }
    
    .modal-actions {
        display: flex;
        gap: 1rem;
        justify-content: center;
    }
    
    .modal-btn {
        padding: 0.75rem 1.5rem;
        border-radius: 10px;
        border: none;
        cursor: pointer;
        font-weight: 600;
        transition: all 0.2s;
        min-width: 100px;
    }
    
    .modal-btn-primary {
        background: linear-gradient(135deg, #10b981, #059669);
        color: white;
    }
    
    .modal-btn-primary:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
    }
    
    .modal-btn-secondary {
        background: #f3f4f6;
        color: #6b7280;
    }
    
    .modal-btn-secondary:hover {
        background: #e5e7eb;
    }
    
    /* Mobile responsiveness */
    @@media (max-width: 768px) {
        .error-container {
            padding: 1rem;
        }
        
        .error-card {
            padding: 2rem 1.5rem;
            border-radius: 20px;
        }
        
        .error-title {
            font-size: 1.75rem;
        }
        
        .error-message {
            font-size: 1rem;
        }
        
        .error-actions {
            flex-direction: column;
            align-items: center;
        }
        
        .btn {
            width: 100%;
            max-width: 280px;
        }
        
        .error-icon {
            width: 80px;
            height: 80px;
        }
        
        .error-icon svg {
            width: 40px;
            height: 40px;
        }
    }
</style>

<div class="error-container">
    <div class="error-card">
        <div class="error-code">@statusCode</div>
        
        <div class="error-icon">
            @switch (icon)
            {
                case "alert-triangle":
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z"></path>
                        <line x1="12" y1="9" x2="12" y2="13"></line>
                        <line x1="12" y1="17" x2="12.01" y2="17"></line>
                    </svg>
                    break;
                case "lock":
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect>
                        <circle cx="12" cy="16" r="1"></circle>
                        <path d="M7 11V7a5 5 0 0 1 10 0v4"></path>
                    </svg>
                    break;
                case "shield-x":
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"></path>
                        <line x1="9.5" y1="9" x2="14.5" y2="14"></line>
                        <line x1="14.5" y1="9" x2="9.5" y2="14"></line>
                    </svg>
                    break;
                case "search":
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <circle cx="11" cy="11" r="8"></circle>
                        <path d="m21 21-4.35-4.35"></path>
                    </svg>
                    break;
                case "x-circle":
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <circle cx="12" cy="12" r="10"></circle>
                        <line x1="15" y1="9" x2="9" y2="15"></line>
                        <line x1="9" y1="9" x2="15" y2="15"></line>
                    </svg>
                    break;
                case "clock":
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <circle cx="12" cy="12" r="10"></circle>
                        <polyline points="12,6 12,12 16,14"></polyline>
                    </svg>
                    break;
                case "zap":
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <polygon points="13,2 3,14 12,14 11,22 21,10 12,10 13,2"></polygon>
                    </svg>
                    break;
                case "server":
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <rect x="2" y="3" width="20" height="6" rx="2" ry="2"></rect>
                        <rect x="2" y="15" width="20" height="6" rx="2" ry="2"></rect>
                        <line x1="6" y1="6" x2="6.01" y2="6"></line>
                        <line x1="6" y1="18" x2="6.01" y2="18"></line>
                    </svg>
                    break;
                case "tool":
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z"></path>
                    </svg>
                    break;
                default:
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <circle cx="12" cy="12" r="10"></circle>
                        <line x1="12" y1="8" x2="12" y2="12"></line>
                        <line x1="12" y1="16" x2="12.01" y2="16"></line>
                    </svg>
                    break;
            }
        </div>
        
        <h1 class="error-title">@title</h1>
        
        <p class="error-message">@message</p>
        
        <div class="error-actions">
            <a href="@actionUrl" class="btn btn-primary">
                @if (showLogin)
                {
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"></path>
                        <polyline points="10,17 15,12 10,7"></polyline>
                        <line x1="15" y1="12" x2="3" y2="12"></line>
                    </svg>
                }
                else
                {
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                        <polyline points="9,22 9,12 15,12 15,22"></polyline>
                    </svg>
                }
                @actionText
            </a>
            
            @if (showRetry)
            {
                <button onclick="showRetryModal()" class="btn btn-refresh">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <polyline points="23,4 23,10 17,10"></polyline>
                        <polyline points="1,20 1,14 7,14"></polyline>
                        <path d="m20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4-4.64 4.36A9 9 0 0 1 3.51 15"></path>
                    </svg>
                    Try Again
                </button>
            }
            
            @if (showBack && !showLogin)
            {
                <button onclick="history.back()" class="btn btn-secondary">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <polyline points="15,18 9,12 15,6"></polyline>
                    </svg>
                    Go Back
                </button>
            }
        </div>
        
        @if (statusCode == 429)
        {
            <div class="retry-timer" id="retryTimer">
                ⏳ Please wait <strong><span id="countdown">60</span> seconds</strong> before trying again.
            </div>
        }
        
        <div class="help-text">
            @if (statusCode == 401)
            {
                <p>For your security, we automatically log you out after periods of inactivity. Your data is safe and secure.</p>
            }
            else if (statusCode == 503)
            {
                <p>We're performing scheduled maintenance and will be back online soon. Thank you for your patience.</p>
            }
            else if (statusCode == 502)
            {
                <p>If this problem persists, please <a href="/contact">contact our support team</a>.</p>
            }
            else
            {
                <p>If you continue to experience issues, please <a href="/contact">contact support</a> with error code <strong>@statusCode</strong>.</p>
            }
        </div>
    </div>
</div>

<!-- Custom Retry Modal -->
<div class="modal-overlay" id="retryModal">
    <div class="modal-content">
        <div class="modal-icon">
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <polyline points="23,4 23,10 17,10"></polyline>
                <polyline points="1,20 1,14 7,14"></polyline>
                <path d="m20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4-4.64 4.36A9 9 0 0 1 3.51 15"></path>
            </svg>
        </div>
        <h3 class="modal-title">Try Again?</h3>
        <p class="modal-message">We're ready to give it another shot. Would you like to refresh the page and try again?</p>
        <div class="modal-actions">
            <button class="modal-btn modal-btn-primary" onclick="confirmRetry()">
                Yes, Retry
            </button>
            <button class="modal-btn modal-btn-secondary" onclick="hideRetryModal()">
                Cancel
            </button>
        </div>
    </div>
</div>

@* <script>
    // Rate limiting countdown timer
    @if (statusCode == 429)
    {
        <text>
        document.getElementById('retryTimer').style.display = 'block';
        let countdown = 60;
        const timer = setInterval(() => {
            countdown--;
            document.getElementById('countdown').textContent = countdown;
            if (countdown <= 0) {
                clearInterval(timer);
                document.getElementById('retryTimer').innerHTML = '<strong>✅ You can try again now!</strong>';
                document.getElementById('retryTimer').style.background = 'linear-gradient(135deg, #ecfdf5, #f0fdf4)';
                document.getElementById('retryTimer').style.borderColor = '#22c55e';
            }
        }, 1000);
        </text>
    }
    
    // Auto-retry prompt for server errors
    @if (statusCode == 502 || statusCode == 503)
    {
        <text>
        setTimeout(() => {
            showRetryModal();
        }, 30000); // Show retry prompt after 30 seconds
        </text>
    }
    
    // Modal functions
    function showRetryModal() {
        document.getElementById('retryModal').classList.add('show');
    }
    
    function hideRetryModal() {
        document.getElementById('retryModal').classList.remove('show');
    }
    
    function confirmRetry() {
        hideRetryModal();
        // Add loading state
        const refreshBtn = document.querySelector('.btn-refresh');
        if (refreshBtn) {
            refreshBtn.innerHTML = `
                <svg width="16" height="16"

 *@ 






    





@* <h1 class="text-danger">Oops! Something went wrong.</h1>
<h2 class="text-danger">An unexpected error occurred while processing your request.</h2>

@if (Model != null && Model.ShowRequestId)
{
    <p>
        <strong>Request ID:</strong> <code>@Model.RequestId</code>
    </p>
}

<h3>Development Mode</h3>
<p>
    Swapping to <strong>Development</strong> environment will display more detailed information about the error that occurred.
</p>
<p>
    <strong>The Development environment shouldn't be enabled for deployed applications.</strong>
    It can result in displaying sensitive information from exceptions to end users.
    For local debugging, enable the <strong>Development</strong> environment by setting the <strong>ASPNETCORE_ENVIRONMENT</strong> environment variable to <strong>Development</strong>
    and restarting the app.
</p> *@
 