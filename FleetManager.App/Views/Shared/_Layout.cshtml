@using FleetManager.Business
@using FleetManager.Business.Database.IdentityModels
@using FleetManager.Business.GoogleMap.Options
@using FleetManager.Business.Interfaces.UserModule
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Options
@inject IOptions<GoogleRoutesApiOptions> GoogleRoutesApiOptions
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject FleetManagerDbContext _context
@inject IAuthUser _authUser

@{
    string area = "";
    string fullName = "User";
    string companyName = "Company";
    string branchName = "Branch";

    var user = await UserManager.GetUserAsync(User);
    if (user != null)
    {
        fullName = $"{user.FirstName} {user.LastName}";

        // Get company name
        if (user.CompanyId.HasValue)
        {
            var company = await _context.Companies
                .Where(c => c.Id == user.CompanyId)
                .Select(c => c.Name)
                .FirstOrDefaultAsync();
            if (!string.IsNullOrEmpty(company))
                companyName = company.ToUpper();
        }

        // Get branch name
        if (user.CompanyBranchId.HasValue)
        {
            var branch = await _context.CompanyBranches
                .Where(b => b.Id == user.CompanyBranchId)
                .Select(b => b.Name)
                .FirstOrDefaultAsync();
            if (!string.IsNullOrEmpty(branch))
                branchName = branch;
        }

        // Determine area by role
        var roles = await UserManager.GetRolesAsync(user);

        if (roles.Contains("Company Owner"))
            area = "Company";
        else if (roles.Contains("Super Admin") || roles.Contains("Company Admin"))
            area = "Admin";
        else if (roles.Contains("Driver"))
            area = "User";
    }
}



<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=0">
    <link rel="shortcut icon" type="image/x-icon" href="~/assets/img/favicon.png">
    <title>FleetGuard - Your solution to manage your fleet of vehicles</title>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

    <!--FlatPickr-->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" type="text/css" href="~/assets/css/bootstrap.min.css">

    <!-- Fontawesome CSS -->
    <link rel="stylesheet" href="~/assets/plugins/fontawesome/css/fontawesome.min.css">
    <link rel="stylesheet" href="~/assets/plugins/fontawesome/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" integrity="sha512-MHzsuwXfBmf+jPU4ZZ0HlnYo+x6IOf/n4iywVZfT3Y6O1z3NL0FcvO1HICIKZx9ql0lmZK5FR2w2X0/FrdFL1g==" crossorigin="anonymous" referrerpolicy="no-referrer" />

    <!-- Select2 CSS -->
    <link rel="stylesheet" type="text/css" href="~/assets/css/select2.min.css">

    <!-- Datatables CSS -->
    <link rel="stylesheet" href="~/assets/plugins/datatables/datatables.min.css">

    <!-- Feathericon CSS -->
    <link rel="stylesheet" href="~/assets/css/feather.css">

    



    <!-- Main CSS -->
    <link rel="stylesheet" type="text/css" href="~/assets/css/style.css">

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@@simonwep/pickr/dist/themes/classic.min.css" />

    <!-- Custom notification styles -->
    <style>
        .notification-badge {
            position: absolute;
            top: 10px;
            right: -5px;
            background: #ff4757;
            color: white;
            border-radius: 50%;
            width: 18px;
            height: 18px;
            font-size: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            animation: pulse 2s infinite;
        }

            .notification-badge.hidden {
                display: none;
            }

        @@keyframes pulse {
            0% {
                transform: scale(1);
            }

            50% {
                transform: scale(1.1);
            }

            100% {
                transform: scale(1);
            }
        }

        .notification-item {
            padding: 12px 15px;
            border-bottom: 1px solid #f0f0f0;
            transition: background-color 0.3s;
        }

            .notification-item:hover {
                background-color: #f8f9fa;
            }

            .notification-item.unread {
                background-color: #e3f2fd;
                border-left: 3px solid #2196f3;
            }

        .notification-time {
            font-size: 11px;
            color: #999;
        }

        .notification-title {
            font-weight: 600;
            color: #333;
        }

        .notification-message {
            font-size: 13px;
            color: #666;
            margin-top: 3px;
        }

        .mark-all-read {
            background: #007bff;
            color: white;
            border: none;
            padding: 1.5px 10px;
            border-radius: 4px;
            font-size: 12px;
            cursor: pointer;
        }

            .mark-all-read:hover {
                background: #0056b3;
            }

        .notification-loading {
            text-align: center;
            padding: 20px;
            color: #999;
        }
    </style>
</head>

<body>
    <div class="main-wrapper">
        <div class="header">
            <div class="header-left">
                <a href="index.html" class="logo">
                    <img src="~/assets/img/logo.png" width="35" height="35" alt=""> <span>@companyName</span>
                </a>
            </div>
            <a id="toggle_btn" href="javascript:void(0);"><img src="~/assets/img/icons/bar-icon.svg" alt=""></a>
            <a id="mobile_btn" class="mobile_btn float-start" href="#sidebar"><img src="~/assets/img/icons/bar-icon.svg" alt=""></a>
            <div class="top-nav-search mob-view">
                <form>
                    <input type="text" class="form-control" placeholder="Search here">
                    <a class="btn"><img src="~/assets/img/icons/search-normal.svg" alt=""></a>
                </form>
            </div>
             
            <ul class="nav user-menu float-end">
                <li class="nav-item dropdown d-none d-md-block">
                    <a href="#" class="dropdown-toggle nav-link position-relative" data-bs-toggle="dropdown" id="notificationDropdown">
                        <img src="~/assets/img/icons/note-icon-01.svg" alt="">
                        <!-- <span class="pulse"></span> -->
                        <span class="notification-badge hidden" id="notificationBadge">0</span>
                    </a>
                    <div class="dropdown-menu notifications" style="width: 350px; max-height: 400px;">
                        <div class="topnav-dropdown-header d-flex justify-content-between align-items-center">
                            <span>Notifications</span>
                            <button class="mark-all-read" id="markAllRead" style="display: none; margin-bottom: inherit;max-width: inherit;max-height: 30px;">Mark All Read</button>
                        </div>
                        <div class="drop-scroll" style="max-height: 300px; max-width:345px;">
                            <div class="notification-loading" id="notificationLoading">
                                <i class="fas fa-spinner fa-spin"></i> Loading notifications...
                            </div>
                            <ul class="notification-list" id="notificationList">
                                <!-- Notifications will be populated here -->
                            </ul>
                        </div>
                        <div class="topnav-dropdown-footer">
                            <a href="#" onclick="viewAllNotifications()">View all Notifications</a>
                        </div>
                    </div>
                </li>
                <li class="nav-item dropdown d-none d-md-block">
                    <a href="javascript:void(0);" id="open_msg_box" class="hasnotifications nav-link"><img src="~/assets/img/icons/note-icon-02.svg" alt=""><span class="pulse"></span> </a>
                </li>
                <li class="nav-item dropdown has-arrow user-profile-list">
                    <a href="#" class="dropdown-toggle nav-link user-link" data-bs-toggle="dropdown">
                        <div class="user-names">
                            <h5>@fullName</h5>
                            <span style="font-weight: bold; text-transform: uppercase;">@branchName</span><br />

                        </div>
                        <span class="user-img">
                            <img src="~/assets/img/user-06.jpg" alt="@fullName">
                        </span>
                    </a>
                    <div class="dropdown-menu">
                        <a class="dropdown-item" asp-area="@area" asp-controller="Profile" asp-action="Index">My Profile</a>
                        <a class="dropdown-item" asp-area="@area" asp-controller="Settings" asp-action="Index">Settings</a>
                        <a class="dropdown-item" asp-area="" asp-action="Logout" asp-controller="Account">Logout</a>
                    </div>
                </li>
                <li class="nav-item ">
                    <a href="settings.html" class="hasnotifications nav-link"><img src="~/assets/img/icons/setting-icon-01.svg" alt=""> </a>
                </li>
            </ul>
            <div class="dropdown mobile-user-menu float-end">
                <a href="#" class="dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false"><i class="fa-solid fa-ellipsis-vertical"></i></a>
                <div class="dropdown-menu dropdown-menu-end">
                    <a class="dropdown-item" href="profile.html">My Profile</a>
                    <a class="dropdown-item" href="edit-profile.html">Edit Profile</a>
                    <a class="dropdown-item" href="settings.html">Settings</a>
                    <a class="dropdown-item" href="login.html">Logout</a>
                </div>
            </div>
        </div>


        @* Success Message *@
        @if (TempData["SuccessMessage"] != null)
        {
            <div id="alert-success" class="alert alert-success alert-dismissible fade show d-flex align-items-center mt-3" role="alert">
                <i class="fas fa-check-circle me-2"></i>
                <div>@TempData["SuccessMessage"]</div>
                <button type="button" class="btn-close ms-auto" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        @* Error Message *@
        @if (TempData["ErrorMessage"] != null)
        {
            <div id="alert-error" class="alert alert-danger alert-dismissible fade show d-flex align-items-center mt-3" role="alert">
                <i class="fas fa-times-circle me-2"></i>
                <div>@TempData["ErrorMessage"]</div>
                <button type="button" class="btn-close ms-auto" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        @* Warning Message *@
        @if (TempData["WarningMessage"] != null)
        {
            <div id="alert-warning" class="alert alert-warning alert-dismissible fade show d-flex align-items-center mt-3" role="alert">
                <i class="fas fa-exclamation-triangle me-2"></i>
                <div>@TempData["WarningMessage"]</div>
                <button type="button" class="btn-close ms-auto" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        @* Info Message *@
        @if (TempData["InfoMessage"] != null)
        {
            <div id="alert-info" class="alert alert-info alert-dismissible fade show d-flex align-items-center mt-3" role="alert">
                <i class="fas fa-info-circle me-2"></i>
                <div>@TempData["InfoMessage"]</div>
                <button type="button" class="btn-close ms-auto" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }



        @if (User.Identity.IsAuthenticated)
        {
            <div class="sidebar" id="sidebar">

                @* Check in the same priority order: Super Admin → Company Owner → Company Admin → Driver *@
                @if (User.IsInRole("Super Admin"))
                {
                    @await Html.PartialAsync("_SidebarAdmin")
                }
                else if (User.IsInRole("Company Owner"))
                {
                    @await Html.PartialAsync("_SidebarCompany")
                }
                else if (User.IsInRole("Company Admin"))
                {
                    @await Html.PartialAsync("_SidebarAdmin")
                }
                else if (User.IsInRole("Driver"))
                {
                    @await Html.PartialAsync("_SidebarDriver")
                }
                else
                {
                    <div class="sidebar-inner slimscroll">
                        <div id="sidebar-menu" class="sidebar-menu">
                            <ul><li>No menu items available.</li></ul>
                        </div>
                    </div>
                }
                @* <partial name="_LeftNav" /> *@

            </div>
        }
        <div class="page-wrapper">
            <div class="content">
                @RenderBody()

                @if (TempData["SuccessMessage"] != null)
                {
                    <div class="alert alert-success alert-dismissible fade show d-flex align-items-center" role="alert">
                        <i class="fas fa-check-circle me-2"></i>
                        <div>@TempData["SuccessMessage"]</div>
                        <button type="button" class="btn-close ms-auto" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                }

            </div>
            <div class="notification-box">
                <div class="msg-sidebar notifications msg-noti">
                    <div class="topnav-dropdown-header">
                        <span>Messages</span>
                    </div>
                    <div class="drop-scroll msg-list-scroll" id="msg_list">
                        <ul class="list-box">
                            <li>
                                <a href="chat.html">
                                    <div class="list-item">
                                        <div class="list-left">
                                            <span class="avatar">R</span>
                                        </div>
                                        <div class="list-body">
                                            <span class="message-author">Richard Miles </span>
                                            <span class="message-time">12:28 AM</span>
                                            <div class="clearfix"></div>
                                            <span class="message-content">Lorem ipsum dolor sit amet, consectetur adipiscing</span>
                                        </div>
                                    </div>
                                </a>
                            </li>
                        </ul>
                    </div>
                    <div class="topnav-dropdown-footer">
                        <a href="chat.html">See all messages</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="sidebar-overlay" data-reff=""></div>

    <audio id="notification-sound" src="/sounds/notify.mp3" preload="auto"></audio>


    <!-- Alert auto-hide script -->
    <script>
        window.addEventListener('DOMContentLoaded', () => {
            ['success', 'error', 'warning', 'info'].forEach(type => {
                const alertBox = document.getElementById(`alert-${type}`);
                if (alertBox) {
                    setTimeout(() => {
                        const bsAlert = bootstrap.Alert.getOrCreateInstance(alertBox);
                        bsAlert.close();
                    }, 5000);
                }
            });
        });
    </script>

    <!-- jQuery -->
    <script src="~/assets/js/jquery-3.7.1.min.js"></script>

    <!-- Bootstrap Core JS -->
    <script src="~/assets/js/bootstrap.bundle.min.js"></script>

  

    <!--Google Map
    <script
     async defer src="https://maps.googleapis.com/maps/api/js?key=@GoogleRoutesApiOptions.Value.ApiKey&libraries=places,geometry&callback=initAll&loading=async">
     </script>
    
    -->

    <script>
        // Called by Google when the API is ready
        window.initAll = function() {
          // If we’re on the Route Planner page, originInput exists → wire up autocomplete
          if (document.getElementById('originInput')) {
            initAutocomplete();
          }

          // If we’re on the Map page, map container exists → draw the map
          if (document.getElementById('map')) {
            initMap();
          }
        };
    </script>

    <script async
            defer
            crossorigin="anonymous"
            src="https://maps.googleapis.com/maps/api/js?key=@GoogleRoutesApiOptions.Value.ApiKey&libraries=places,geometry&callback=initAll&v=weekly">
    </script>



     


    <!-- Google Maps Web Components (Required for gmpx-placeautocomplete to work) -->
    <script defer
            src="https://unpkg.com/@@googlemaps/places-autocomplete-element@latest">
    </script>


    <!-- SignalR -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.0/signalr.min.js"></script>

    <!-- Moment.js for “time ago” -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/moment@2.29.4/locale/en-gb.js"></script>

    <!-- Notification Management Script -->
    <script>


        window.notificationUserId = '@_authUser.UserId';

        class NotificationManager {
            constructor() {
                this.connection = null;
                this.notifications = [];
                this.unreadCount = 0;
                this.isConnected = false;
                this.sessionKey = `fm:notifications:${window.notificationUserId}`;
                this.init();
            }

            async init() {
                try {
                    await this.setupSignalR();
                    await this.loadExistingNotifications();
                    this.setupEventHandlers();
                } catch (error) {
                    console.error('Failed to initialize notification manager:', error);
                }
            }

            async setupSignalR() {
                this.connection = new signalR.HubConnectionBuilder()
                    .withUrl("/notificationHub")
                    .withAutomaticReconnect()
                    .build();

                this.connection.on("ReceiveNotification", (notification) => {
                    this.addNotification(notification, true);
                });

                this.connection.onreconnected(() => {
                    console.log('SignalR reconnected');
                    this.isConnected = true;
                });

                this.connection.onclose(() => {
                    console.log('SignalR disconnected');
                    this.isConnected = false;
                });

                await this.connection.start();
                this.isConnected = true;
                console.log('SignalR connected successfully');
            }

        async loadExistingNotifications() {
            try {
                document.getElementById('notificationLoading').style.display = 'none';
                const resp = await fetch('/api/notifications', { credentials: 'same-origin' });
                if (!resp.ok) throw new Error('Could not load');
                const notifications = await resp.json();

                // Keep old unread IDs for comparison (you can remove this block if not needed)
                const previousUnreadIds = new Set(this.notifications.filter(n => !n.isRead).map(n => n.id));

                this.notifications = []; // clear existing
                notifications.forEach(n => this.notifications.push({
                    id: n.id || Date.now(),
                    title: n.title || 'New Notification',
                    message: n.message || '',
                    timestamp: n.timestamp || new Date().toISOString(),
                    isRead: n.isRead || false,
                    type: n.type || 'info',
                    userId: n.userId || '',
                    data: n.data || {}
                }));

                // ① Calculate the new unread count
                this.unreadCount = this.notifications.filter(n => !n.isRead).length;

                // ② Sort & render
                this.notifications.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
                this.updateUI();

                // ─────── NEW: Play sound only if unreadCount increased ───────
                const lastUnread = parseInt(localStorage.getItem('lastUnreadCount') || '0', 10);
                if (this.unreadCount > lastUnread) {
                    this.playNotificationSound();
                }
                localStorage.setItem('lastUnreadCount', this.unreadCount);
                // ───────────────────────────────────────────────────────────────

            } catch (error) {
                console.error('Failed to load existing notifications:', error);
                document.getElementById('notificationLoading').style.display = 'none';
            }
        }
            addNotification(notification, isNew = true) {
                this.notifications.splice(0, 0,{
                    id: notification.id || Date.now(),
                    title: notification.title || 'New Notification',
                    message: notification.message || '',
                    timestamp: notification.timestamp || new Date().toISOString(),
                    isRead: notification.isRead || false,
                    type: notification.type || 'info',
                    userId: notification.userId || '',
                    data: notification.data || {}
                });

                if (!notification.isRead) {
                    this.unreadCount++;
                }

                if (this.notifications.length > 50) {
                    this.notifications = this.notifications.slice(0, 50);
                }
                this.notifications.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
                this.updateUI();

                if (isNew) {
                    this.showToastNotification(notification);
                    this.playNotificationSound();
                }
            }

            updateUI() {
                this.updateBadge();
                this.updateNotificationList();
                this.updateMarkAllReadButton();
            }

            updateBadge() {
                const badge = document.getElementById('notificationBadge');
                if (this.unreadCount > 0) {
                    badge.textContent = this.unreadCount > 99 ? '99+' : this.unreadCount;
                    badge.classList.remove('hidden');
                } else {
                    badge.classList.add('hidden');
                }
            }

            updateNotificationList() {
                const list = document.getElementById('notificationList');
                list.innerHTML = '';

                if (this.notifications.length === 0) {
                    list.innerHTML = '<li class="notification-item text-center text-muted">No notifications yet</li>';
                    return;
                }

                this.notifications.forEach(notification => {
                    const li = document.createElement('li');
                    li.className = `notification-item ${!notification.isRead ? 'unread' : ''}`;
                    li.setAttribute('data-id', notification.id);

                    const timeAgo = this.getTimeAgo(notification.timestamp);
                    const icon = this.getNotificationIcon(notification.type);

                    li.innerHTML = `
                        <div class="d-flex">
                            <div class="me-3">
                                <i class="${icon}" style="color: ${this.getNotificationColor(notification.type)};"></i>
                            </div>
                            <div class="flex-grow-1">
                                <div class="notification-title">${this.escapeHtml(notification.title)}</div>
                                <div class="notification-message">${this.escapeHtml(notification.message)}</div>
                                <div class="notification-time">${timeAgo}</div>
                            </div>
                            ${!notification.isRead ? '<div class="ms-2"><i class="fas fa-circle" style="color: #007bff; font-size: 8px;"></i></div>' : ''}
                        </div>
                    `;
                    li.addEventListener('click', () => this.markAsRead(notification.id));
                    list.appendChild(li);
                });
            }

            updateMarkAllReadButton() {
                const button = document.getElementById('markAllRead');
                button.style.display = this.unreadCount > 0 ? 'inline-block' : 'none';
            }

            getNotificationIcon(type) {
                const t = String(type).toLowerCase();
                const icons = {
                    'info': 'fas fa-info-circle',
                    'success': 'fas fa-check-circle',
                    'warning': 'fas fa-exclamation-triangle',
                    'error': 'fas fa-times-circle',
                    'vehicle': 'fas fa-car',
                    'maintenance': 'fas fa-wrench',
                    'driver': 'fas fa-user',
                    'alert': 'fas fa-bell'
                };
                return icons[t] || icons['alert'];
            }

            getNotificationColor(type) {
                const t = String(type).toLowerCase();
                const colors = {
                    'info': '#17a2b8',
                    'success': '#28a745',
                    'warning': '#ffc107',
                    'error': '#dc3545',
                    'vehicle': '#6f42c1',
                    'maintenance': '#fd7e14',
                    'driver': '#20c997',
                    'alert': '#007bff'
                };
                return colors[t] || colors['alert'];
            }

            getTimeAgo(timestamp) {
                try {
                    if (typeof moment !== 'undefined') {
                        moment.locale('en'); // set your preferred locale
                        return moment.utc(timestamp).local().fromNow(); // ← Correct usage
                    }
                } catch (e) {
                    console.warn('Moment.js not available or failed:', e);
                }

                // fallback
                const now = new Date();
                const time = new Date(timestamp);
                const diff = Math.floor((now - time) / 1000);

                if (diff < 60) return 'Just now';
                if (diff < 3600) return `${Math.floor(diff / 60)}m ago`;
                if (diff < 86400) return `${Math.floor(diff / 3600)}h ago`;
                if (diff < 604800) return `${Math.floor(diff / 86400)}d ago`;
                return time.toLocaleDateString();
            }

            escapeHtml(str) {
                return str
                    .replace(/&/g, "&amp;")
                    .replace(/</g, "&lt;")
                    .replace(/>/g, "&gt;")
                    .replace(/"/g, "&quot;")
                    .replace(/'/g, "&#039;");
            }

            async markAsRead(notificationId) {
                const notif = this.notifications.find(n => n.id == notificationId);
                if (notif && !notif.isRead) {
                    notif.isRead = true;
                    this.unreadCount = Math.max(0, this.unreadCount - 1);
                    this.updateUI();

                    try {
                        await fetch('/api/notifications/mark-read', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ notificationId })
                        });
                    } catch (err) {
                        console.error('Failed to mark notification as read:', err);
                    }
                }
            }

            async markAllAsRead() {
                this.notifications.forEach(n => n.isRead = true);
                this.unreadCount = 0;
                this.updateUI();

                try {
                    await fetch('/api/notifications/mark-all-read', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' }
                    });
                } catch (err) {
                    console.error('Failed to mark all notifications as read:', err);
                }
            }

            showToastNotification(notification) {
                const toast = document.createElement('div');
                toast.className = 'toast-notification';
                toast.style.cssText = `
                    position: fixed;
                    top: 80px;
                    right: 20px;
                    background: white;
                    border: 1px solid #ddd;
                    border-radius: 8px;
                    padding: 15px;
                    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                    z-index: 9999;
                    max-width: 350px;
                    animation: slideIn 0.3s ease-out;
                `;
                toast.innerHTML = `
                    <div class="d-flex align-items-start">
                        <i class="${this.getNotificationIcon(notification.type)}" style="color: ${this.getNotificationColor(notification.type)}; margin-right: 10px; margin-top: 2px;"></i>
                        <div class="flex-grow-1">
                            <div style="font-weight: 600; margin-bottom: 4px;">${this.escapeHtml(notification.title)}</div>
                            <div style="font-size: 14px; color: #666;">${this.escapeHtml(notification.message)}</div>
                        </div>
                        <button onclick="this.closest('.toast-notification').remove()" style="border:none;background:none;color:#999;font-size:18px;line-height:1;margin-left:10px;">&times;</button>
                    </div>
                `;
                document.body.appendChild(toast);
                setTimeout(() => toast.remove(), 5000);
            }

                    playNotificationSound() {
            try {
                const audio = document.getElementById('notification-sound');
                if (audio) {
                    audio.currentTime = 0;
                    audio.play().catch(() => {
                        console.warn('Notification sound blocked by browser autoplay policy');
                    });
                }
            } catch (e) {
                console.warn('Could not play notification sound:', e);
            }
        }

            setupEventHandlers() {
                document.getElementById('markAllRead').addEventListener('click', () => this.markAllAsRead());
                document.getElementById('notificationDropdown').addEventListener('click', () => this.updateUI());
            }
        }

        function viewAllNotifications() {
            window.location.href = '/notifications';
        }

        const style = document.createElement('style');
        style.textContent = `
        @@keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to   { transform: translateX(0);    opacity: 1; }
        }
        `;
        document.head.appendChild(style);

        document.addEventListener('DOMContentLoaded', () => {
            window.notificationManager = new NotificationManager();
        });
    </script>


    <!-- Feather Js -->
    <script src="~/assets/js/feather.min.js"></script>

    <!-- Slimscroll -->
    <script src="~/assets/js/jquery.slimscroll.js"></script>

    <!-- Select2 Js -->
    <script src="~/assets/js/select2.min.js"></script>

    <!-- Datatables JS -->
    <script src="~/assets/plugins/datatables/jquery.dataTables.min.js"></script>
    <script src="~/assets/plugins/datatables/datatables.min.js"></script>

    <!-- counterup JS -->
    <script src="~/assets/js/jquery.waypoints.js"></script>
    <script src="~/assets/js/jquery.counterup.min.js"></script>

    <!-- Apexchart JS -->
    <script src="~/assets/plugins/apexchart/apexcharts.min.js"></script>
    <script src="~/assets/plugins/apexchart/chart-data.js"></script>

    <!-- Custom JS -->
    <script src="~/assets/js/app.js"></script>


    @await RenderSectionAsync("Scripts", required: false)
</body>

</html>





